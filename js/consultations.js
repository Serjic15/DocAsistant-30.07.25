/**
 * CardioAssistant Pro - Consultations Management Module (–û–ë–ù–û–í–õ–ï–ù v2.0)
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏ - –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù –° IndexedDB
 * –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ IndexedDB —á–µ—Ä–µ–∑ StorageManager
 */

class ConsultationsManager {
    constructor() {
        this.consultations = [];
        this.storageKey = 'cardio_consultations'; // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        this.currentConsultation = null;
        this.currentPatient = null;
        this.isInitialized = false;
        this.doctorId = 'default'; // –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    }

    async init() {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π...');
        
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
        if (!window.storageManager || !window.storageManager.isInitialized) {
            await new Promise(resolve => {
                const checkInterval = setInterval(() => {
                    if (window.storageManager && window.storageManager.isInitialized) {
                        clearInterval(checkInterval);
                        resolve();
                    }
                }, 100);
            });
        }
        
        await this.loadConsultations();
        console.log('‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.isInitialized = true;
    }

    async loadConsultations() {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ IndexedDB
            if (window.storageManager && window.storageManager.isInitialized) {
                this.consultations = await storageManager.getAllConsultations();
                console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏–∑ IndexedDB: ${this.consultations.length}`);
            } else {
                // Fallback –Ω–∞ localStorage
                this.consultations = utils.loadFromStorage(this.storageKey, []);
                console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏–∑ localStorage: ${this.consultations.length}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:', error);
            this.consultations = [];
        }
    }

    async saveConsultations() {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if (window.storageManager && window.storageManager.isInitialized) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ IndexedDB
                for (const consultation of this.consultations) {
                    await storageManager.saveConsultation(consultation);
                }
                console.log('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ IndexedDB');
            } else {
                // Fallback –Ω–∞ localStorage
                utils.saveToStorage(this.storageKey, this.consultations);
                console.log('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
            }
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:', error);
            return false;
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫
    handleAutofillHotkey(event, fieldType) {
        // Ctrl+Space - –ø–æ–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
        if (event.ctrlKey && event.code === 'Space') {
            event.preventDefault();
            autofillManager.showPanel(fieldType);
        }
    }

    // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ø–æ–ª—É—á–µ–Ω–∏–µ HTML —Ñ–æ—Ä–º—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (—É–±—Ä–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±–æ—Ä–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞)
    getConsultationForm() {
        return `
            <form id="consultationForm" class="needs-validation" novalidate>
                <!-- –¢–∏–ø –ø—Ä–∏–µ–º–∞ -->
                <div class="form-section">
                    <h3>–¢–∏–ø –ø—Ä–∏–µ–º–∞</h3>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="appointmentType" id="appointmentPrimary" value="primary">
                                <label class="form-check-label" for="appointmentPrimary">
                                    –ü–µ—Ä–≤–∏—á–Ω—ã–π
                                </label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="appointmentType" id="appointmentSecondary" value="secondary">
                                <label class="form-check-label" for="appointmentSecondary">
                                    –ü–æ–≤—Ç–æ—Ä–Ω—ã–π
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –ñ–∞–ª–æ–±—ã -->
                <div class="form-section">
                    <h3>–ñ–∞–ª–æ–±—ã <span class="required">*</span></h3>
                    <div class="mb-3">
                        <div class="input-group">
                            <textarea class="form-control" id="complaints" rows="3" required
                                placeholder="–û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∂–∞–ª–æ–±—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞..."
                                onkeydown="consultationsManager.handleAutofillHotkey(event, 'complaints')"></textarea>
                            <button class="btn btn-outline-secondary" type="button" 
                                    onclick="autofillManager.showPanel('complaints')"
                                    title="–ê–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+Space)">
                                <i class="fas fa-list"></i>
                            </button>
                        </div>
                        <small class="text-muted">üí° –ü–µ—á–∞—Ç–∞–π—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+Space –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫</small>
                        <div class="invalid-feedback">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∂–∞–ª–æ–±—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞</div>
                    </div>
                </div>

                <!-- –ê–Ω–∞–º–Ω–µ–∑ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è -->
                <div class="form-section">
                    <h3>–ê–Ω–∞–º–Ω–µ–∑ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è <span class="required">*</span></h3>
                    <div class="mb-3">
                        <div class="input-group">
                            <textarea class="form-control" id="anamnesisDisease" rows="4" required
                                placeholder="–û–ø–∏—à–∏—Ç–µ –∞–Ω–∞–º–Ω–µ–∑ —Ä–∞–∑–≤–∏—Ç–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è..."
                                onkeydown="consultationsManager.handleAutofillHotkey(event, 'anamnesis-disease')"></textarea>
                            <button class="btn btn-outline-secondary" type="button" 
                                    onclick="autofillManager.showPanel('anamnesis-disease')"
                                    title="–ê–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+Space)">
                                <i class="fas fa-list"></i>
                            </button>
                        </div>
                        <small class="text-muted">üí° –ü–µ—á–∞—Ç–∞–π—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+Space –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫</small>
                        <div class="invalid-feedback">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–Ω–∞–º–Ω–µ–∑ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è</div>
                    </div>
                </div>

                <!-- –ê–Ω–∞–º–Ω–µ–∑ –∂–∏–∑–Ω–∏ -->
                <div class="form-section">
                    <h3>–ê–Ω–∞–º–Ω–µ–∑ –∂–∏–∑–Ω–∏</h3>
                    
                    <!-- –ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å -->
                    <div class="mb-3">
                        <label class="form-label">–ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å</label>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="heredity" id="heredityNo" value="no" onchange="consultationsManager.toggleHeredity()">
                                    <label class="form-check-label" for="heredityNo">
                                        –ù–µ –æ—Ç—è–≥–æ—â–µ–Ω–∞
                                    </label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="heredity" id="heredityYes" value="yes" onchange="consultationsManager.toggleHeredity()">
                                    <label class="form-check-label" for="heredityYes">
                                        –û—Ç—è–≥–æ—â–µ–Ω–∞
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div id="heredityDetails" style="display: none;" class="mt-2">
                            <textarea class="form-control" id="heredityText" rows="2" 
                                placeholder="–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏..."></textarea>
                        </div>
                    </div>

                    <!-- –ê–ª–ª–µ—Ä–≥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–º–Ω–µ–∑ -->
                    <div class="mb-3">
                        <label class="form-label">–ê–ª–ª–µ—Ä–≥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–º–Ω–µ–∑</label>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="allergy" id="allergyNo" value="no" onchange="consultationsManager.toggleAllergy()">
                                    <label class="form-check-label" for="allergyNo">
                                        –ù–µ –æ—Ç—è–≥–æ—â–µ–Ω
                                    </label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="allergy" id="allergyYes" value="yes" onchange="consultationsManager.toggleAllergy()">
                                    <label class="form-check-label" for="allergyYes">
                                        –û—Ç—è–≥–æ—â–µ–Ω
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div id="allergyDetails" style="display: none;" class="mt-2">
                            <textarea class="form-control" id="allergyText" rows="2" 
                                placeholder="–£–∫–∞–∂–∏—Ç–µ –Ω–∞ —á—Ç–æ –∞–ª–ª–µ—Ä–≥–∏—è –∏ –∫–∞–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è..."></textarea>
                        </div>
                    </div>

                    <!-- –í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ - –ø–æ–ª—è –ó–ê–ö–†–´–¢–´ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é -->
                    <div class="mb-3">
                        <label class="form-label">–í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏</label>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="habit-checkbox">
                                    <input class="form-check-input" type="checkbox" id="smokingCheckbox" onchange="consultationsManager.toggleHabit('smoking')">
                                    <label class="form-check-label" for="smokingCheckbox">
                                        –ö—É—Ä–µ–Ω–∏–µ
                                    </label>
                                </div>
                                <div id="smokingDetails" class="habit-details" style="display: none;">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <input type="number" class="form-control form-control-sm" id="smokingYears" placeholder="–°—Ç–∞–∂ –ª–µ—Ç" onkeyup="consultationsManager.calculatePYI()">
                                        </div>
                                        <div class="col-md-3">
                                            <input type="number" class="form-control form-control-sm" id="smokingDaily" placeholder="–°–∏–≥/–¥–µ–Ω—å" onkeyup="consultationsManager.calculatePYI()">
                                        </div>
                                        <div class="col-md-3">
                                            <input type="text" class="form-control form-control-sm" id="pyi" placeholder="–ò–ö–ß" readonly>
                                        </div>
                                    </div>
                                </div>

                                <div class="habit-checkbox">
                                    <input class="form-check-input" type="checkbox" id="alcoholCheckbox" onchange="consultationsManager.toggleHabit('alcohol')">
                                    <label class="form-check-label" for="alcoholCheckbox">
                                        –ó–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª–µ–º
                                    </label>
                                </div>
                                <div id="alcoholDetails" class="habit-details" style="display: none;">
                                    <textarea class="form-control" rows="2" id="alcoholText" placeholder="–ß–∞—Å—Ç–æ—Ç–∞ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ..."></textarea>
                                </div>

                                <div class="habit-checkbox">
                                    <input class="form-check-input" type="checkbox" id="drugsCheckbox" onchange="consultationsManager.toggleHabit('drugs')">
                                    <label class="form-check-label" for="drugsCheckbox">
                                        –£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤ –∏ –ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤
                                    </label>
                                </div>
                                <div id="drugsDetails" class="habit-details" style="display: none;">
                                    <textarea class="form-control" rows="2" id="drugsText" placeholder="–ö–∞–∫–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞, —á–∞—Å—Ç–æ—Ç–∞..."></textarea>
                                </div>

                                <div class="habit-checkbox">
                                    <input class="form-check-input" type="checkbox" id="stressCheckbox" onchange="consultationsManager.toggleHabit('stress')">
                                    <label class="form-check-label" for="stressCheckbox">
                                        –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å
                                    </label>
                                </div>
                                <div id="stressDetails" class="habit-details" style="display: none;">
                                    <textarea class="form-control" rows="2" id="stressText" placeholder="–ü—Ä–∏—á–∏–Ω—ã —Å—Ç—Ä–µ—Å—Å–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å..."></textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –û–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –æ—Å–º–æ—Ç—Ä -->
                <div class="form-section">
                    <h3>–û–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –æ—Å–º–æ—Ç—Ä <span class="required">*</span></h3>
                    
                    <!-- –ê–Ω—Ç—Ä–æ–ø–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ -->
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label for="patientWeight" class="form-label">–í–µ—Å (–∫–≥)</label>
                            <input type="number" class="form-control" id="patientWeight" step="0.1" min="0" onkeyup="consultationsManager.calculateBMIandBSA()">
                        </div>
                        <div class="col-md-3">
                            <label for="patientHeight" class="form-label">–†–æ—Å—Ç (—Å–º)</label>
                            <input type="number" class="form-control" id="patientHeight" min="0" onkeyup="consultationsManager.calculateBMIandBSA()">
                        </div>
                        <div class="col-md-3">
                            <label for="patientBMI" class="form-label">–ò–ú–¢</label>
                            <input type="text" class="form-control" id="patientBMI" readonly>
                            <span class="text-muted small">–∫–≥/–º¬≤</span>
                        </div>
                        <div class="col-md-3">
                            <label for="patientBSA" class="form-label">–ü–ü–¢</label>
                            <input type="text" class="form-control" id="patientBSA" readonly>
                            <span class="text-muted small">–º¬≤</span>
                        </div>
                    </div>
                    
                    <!-- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π -->
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label for="bloodPressure1" class="form-label">–ê–î 1</label>
                            <input type="text" class="form-control" id="bloodPressure1" 
                                placeholder="120/80" onkeyup="consultationsManager.calculateAverageBP()">
                        </div>
                        <div class="col-md-3">
                            <label for="bloodPressure2" class="form-label">–ê–î 2</label>
                            <input type="text" class="form-control" id="bloodPressure2" 
                                placeholder="120/80" onkeyup="consultationsManager.calculateAverageBP()">
                        </div>
                        <div class="col-md-3">
                            <label for="bloodPressure3" class="form-label">–ê–î 3</label>
                            <input type="text" class="form-control" id="bloodPressure3" 
                                placeholder="120/80" onkeyup="consultationsManager.calculateAverageBP()">
                        </div>
                        <div class="col-md-3">
                            <label for="heartRate" class="form-label">–ß–°–°/–ß–°–ñ</label>
                            <input type="number" class="form-control" id="heartRate" 
                                min="30" max="200" onkeyup="consultationsManager.updateObjectiveExam()">
                            <small class="text-muted">—É–¥/–º–∏–Ω</small>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label for="respiratoryRate" class="form-label">–ß–î–î</label>
                            <input type="number" class="form-control" id="respiratoryRate" 
                                min="10" max="40" onkeyup="consultationsManager.updateObjectiveExam()">
                            <small class="text-muted">–≤ –º–∏–Ω</small>
                        </div>
                        <div class="col-md-3">
                            <label for="spo2" class="form-label">SpO‚ÇÇ</label>
                            <input type="number" class="form-control" id="spo2" 
                                min="50" max="100" onkeyup="consultationsManager.updateObjectiveExam()">
                            <small class="text-muted">%</small>
                        </div>
                        <div class="col-md-3">
                            <label for="temperature" class="form-label">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</label>
                            <input type="number" class="form-control" id="temperature" 
                                step="0.1" min="35" max="42">
                            <small class="text-muted">¬∞C</small>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="objectiveExam" class="form-label">–î–∞–Ω–Ω—ã–µ –æ—Å–º–æ—Ç—Ä–∞ <span class="required">*</span></label>
                        <textarea class="form-control" id="objectiveExam" rows="4" required
                            placeholder="–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–∂–Ω—ã–µ –ø–æ–∫—Ä–æ–≤—ã, –∞—É—Å–∫—É–ª—å—Ç–∞—Ü–∏—è..."></textarea>
                        <div class="invalid-feedback">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞</div>
                    </div>
                </div>

                <!-- –î–∏–∞–≥–Ω–æ–∑ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã –°–ö–†–´–¢–´ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é -->
                <div class="form-section">
                    <h3>–î–∏–∞–≥–Ω–æ–∑ <span class="required">*</span></h3>
                    
                    <div class="diagnosis-container">
                        <label for="mainDiagnosis" class="form-label">–û—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ <span class="required">*</span></label>
                        <textarea class="form-control" id="mainDiagnosis" rows="2" required
                            placeholder="–û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ–∑..." ondblclick="mkb10Manager.showClassifier(this)"></textarea>
                        <small class="text-muted">–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ú–ö–ë-10</small>
                        <div class="invalid-feedback">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ–∑</div>
                    </div>

                    <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã –°–ö–†–´–¢–´ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é -->
                    <div class="diagnosis-container mt-3">
                        <div class="diagnosis-checkbox">
                            <input type="checkbox" id="competingCheckbox" onchange="consultationsManager.toggleDiagnosis('competing')">
                            <label for="competingCheckbox" class="form-check-label">–ö–æ–Ω–∫—É—Ä–∏—Ä—É—é—â–µ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ</label>
                        </div>
                        <div class="diagnosis-content" id="competingContent" style="display: none;">
                            <textarea class="form-control" id="competingDiagnosis" rows="2" 
                                placeholder="–ö–æ–Ω–∫—É—Ä–∏—Ä—É—é—â–∏–π –¥–∏–∞–≥–Ω–æ–∑..." ondblclick="mkb10Manager.showClassifier(this)"></textarea>
                        </div>
                    </div>

                    <div class="diagnosis-container">
                        <div class="diagnosis-checkbox">
                            <input type="checkbox" id="backgroundCheckbox" onchange="consultationsManager.toggleDiagnosis('background')">
                            <label for="backgroundCheckbox" class="form-check-label">–§–æ–Ω–æ–≤–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ</label>
                        </div>
                        <div class="diagnosis-content" id="backgroundContent" style="display: none;">
                            <textarea class="form-control" id="backgroundDiagnosis" rows="2" 
                                placeholder="–§–æ–Ω–æ–≤—ã–π –¥–∏–∞–≥–Ω–æ–∑..." ondblclick="mkb10Manager.showClassifier(this)"></textarea>
                        </div>
                    </div>

                    <div class="diagnosis-container">
                        <div class="diagnosis-checkbox">
                            <input type="checkbox" id="complicationCheckbox" onchange="consultationsManager.toggleDiagnosis('complication')">
                            <label for="complicationCheckbox" class="form-check-label">–û—Å–ª–æ–∂–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è</label>
                        </div>
                        <div class="diagnosis-content" id="complicationContent" style="display: none;">
                            <textarea class="form-control" id="complicationDiagnosis" rows="2" 
                                placeholder="–û—Å–ª–æ–∂–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è..." ondblclick="mkb10Manager.showClassifier(this)"></textarea>
                        </div>
                    </div>

                    <div class="diagnosis-container">
                        <div class="diagnosis-checkbox">
                            <input type="checkbox" id="concomitantCheckbox" onchange="consultationsManager.toggleDiagnosis('concomitant')">
                            <label class="form-check-label" for="concomitantCheckbox">–°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ</label>
                        </div>
                        <div class="diagnosis-content" id="concomitantContent" style="display: none;">
                            <textarea class="form-control" id="concomitantDiagnosis" rows="2" 
                                placeholder="–°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–≥–Ω–æ–∑..." ondblclick="mkb10Manager.showClassifier(this)"></textarea>
                        </div>
                    </div>
                </div>

                <!-- –ü–ª–∞–Ω –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è -->
                <div class="form-section">
                    <h3>–ü–ª–∞–Ω –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è <span class="required">*</span></h3>
                    <div class="mb-3">
                        <div class="input-group">
                            <textarea class="form-control" id="examPlan" rows="4" required
                                placeholder="–ü–ª–∞–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è..."
                                onkeydown="consultationsManager.handleAutofillHotkey(event, 'exam-plan')"></textarea>
                            <button class="btn btn-outline-secondary" type="button" 
                                    onclick="autofillManager.showPanel('exam-plan')"
                                    title="–ê–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+Space)">
                                <i class="fas fa-list"></i>
                            </button>
                        </div>
                        <small class="text-muted">üí° –ü–µ—á–∞—Ç–∞–π—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+Space –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫</small>
                        <div class="invalid-feedback">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–ª–∞–Ω –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</div>
                    </div>
                </div>

                <!-- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ -->
                <div class="form-section">
                    <h3>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ <span class="required">*</span></h3>
                    
                    <div class="mb-3">
                        <label for="medications" class="form-label">–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–∑–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è</label>
                        <div class="input-group">
                            <textarea class="form-control" id="medications" rows="4" 
                                placeholder="–ü—Ä–µ–ø–∞—Ä–∞—Ç, –¥–æ–∑–∏—Ä–æ–≤–∫–∞, –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞..."
                                onkeydown="consultationsManager.handleAutofillHotkey(event, 'medications')"></textarea>
                            <button class="btn btn-outline-secondary" type="button" 
                                    onclick="autofillManager.showPanel('medications')"
                                    title="–ê–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+Space)">
                                <i class="fas fa-list"></i>
                            </button>
                        </div>
                        <small class="text-muted">üí° –ü–µ—á–∞—Ç–∞–π—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+Space –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫</small>
                    </div>
                    
                    <div class="mb-3">
                        <label for="regime" class="form-label">–†–µ–∂–∏–º</label>
                        <div class="input-group">
                            <textarea class="form-control" id="regime" rows="2" 
                                placeholder="–†–µ–∂–∏–º –¥–Ω—è, —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏..."
                                onkeydown="consultationsManager.handleAutofillHotkey(event, 'regime')"></textarea>
                            <button class="btn btn-outline-secondary" type="button" 
                                    onclick="autofillManager.showPanel('regime')"
                                    title="–ê–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+Space)">
                                <i class="fas fa-list"></i>
                            </button>
                        </div>
                        <small class="text-muted">üí° –ü–µ—á–∞—Ç–∞–π—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+Space –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫</small>
                    </div>
                    
                    <div class="mb-3">
                        <label for="diet" class="form-label">–î–∏–µ—Ç–∞</label>
                        <div class="input-group">
                            <textarea class="form-control" id="diet" rows="2" 
                                placeholder="–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."
                                onkeydown="consultationsManager.handleAutofillHotkey(event, 'diet')"></textarea>
                            <button class="btn btn-outline-secondary" type="button" 
                                    onclick="autofillManager.showPanel('diet')"
                                    title="–ê–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+Space)">
                                <i class="fas fa-list"></i>
                            </button>
                        </div>
                        <small class="text-muted">üí° –ü–µ—á–∞—Ç–∞–π—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+Space –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫</small>
                    </div>
                    
                    <!-- –°–ª–µ–¥—É—é—â–∏–π –≤–∏–∑–∏—Ç -->
                    <div class="next-visit-container">
                        <h5>–°–ª–µ–¥—É—é—â–∏–π –≤–∏–∑–∏—Ç</h5>
                        <div class="next-visit-options">
                            <div class="next-visit-option">
                                <input type="radio" name="nextVisitType" id="nextVisitDate" value="date" onchange="consultationsManager.toggleNextVisitType()">
                                <label for="nextVisitDate">–ù–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É</label>
                            </div>
                            <div class="next-visit-option">
                                <input type="radio" name="nextVisitType" id="nextVisitNeeded" value="needed" onchange="consultationsManager.toggleNextVisitType()">
                                <label for="nextVisitNeeded">–ü–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏</label>
                            </div>
                        </div>
                        <div id="nextVisitDateContainer" style="display: none;">
                            <input type="date" class="form-control" id="nextVisit">
                        </div>
                        <div id="nextVisitNeededContainer" style="display: none;">
                            <select class="form-select" id="nextVisitReason">
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É</option>
                                <option value="–£—Ö—É–¥—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è">–ü—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è</option>
                                <option value="–ü–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤">–ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤</option>
                                <option value="–ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ç–µ—Ä–∞–ø–∏–∏">–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Ç–µ—Ä–∞–ø–∏–∏</option>
                                <option value="–ö–æ–Ω—Ç—Ä–æ–ª—å –∞–Ω–∞–ª–∏–∑–æ–≤">–î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤</option>
                                <option value="–ü–ª–∞–Ω–æ–≤–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ">–ü–ª–∞–Ω–æ–≤–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- –£–ë–†–ê–ù–´ –û–ë–©–ò–ï –ö–ù–û–ü–ö–ò - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ -->

            </form>

            <style>
            .habit-details {
                display: none;
                margin-top: 0.5rem;
                margin-left: 1.5rem;
                padding: 0.75rem;
                background: #f8f9fa;
                border-radius: 4px;
                border: 1px solid #e9ecef;
            }
            
            .habit-details.active {
                display: block;
            }
            
            .habit-checkbox {
                margin-bottom: 0.5rem;
            }
            
            .diagnosis-container {
                margin-bottom: 1rem;
            }
            
            .diagnosis-checkbox {
                margin-bottom: 0.5rem;
            }
            
            .diagnosis-content {
                display: none;
                margin-left: 1.5rem;
            }
            
            .diagnosis-content.active {
                display: block;
            }
            
            .next-visit-container {
                background: #f8f9fa;
                padding: 1rem;
                border-radius: 8px;
                border: 1px solid #e9ecef;
                margin-top: 1rem;
            }
            
            .next-visit-options {
                display: flex;
                gap: 2rem;
                margin-bottom: 1rem;
            }
            
            .next-visit-option {
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }

            /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫ */
            .input-group .btn-outline-secondary {
                border-color: #ced4da;
                color: #6c757d;
            }
            
            .input-group .btn-outline-secondary:hover {
                background-color: #e9ecef;
                border-color: var(--primary-color);
                color: var(--primary-color);
            }
            
            /* –ü–æ–¥—Å–∫–∞–∑–∫–∏ */
            .text-muted small {
                font-size: 0.8rem;
            }
            </style>
        `;
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ app.js)
    createNewConsultation(patient) {
        console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:', patient);
        
        this.currentPatient = patient;
        this.currentConsultation = null;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞
        setTimeout(() => {
            this.fillMedicalDataFromPatient(patient);
        }, 100);
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        this.clearConsultationFields();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –∂–∞–ª–æ–±—ã
        setTimeout(() => {
            const complaintsField = document.getElementById('complaints');
            if (complaintsField) {
                complaintsField.focus();
            }
        }, 200);
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞
    fillMedicalDataFromPatient(patient) {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–≤–µ—Å, —Ä–æ—Å—Ç) –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (patient.weight) {
            const weightField = document.getElementById('patientWeight');
            if (weightField) weightField.value = patient.weight;
        }
        
        if (patient.height) {
            const heightField = document.getElementById('patientHeight');
            if (heightField) heightField.value = patient.height;
        }
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ò–ú–¢ –∏ –ü–ü–¢
        this.calculateBMIandBSA();
        
        console.log('üìã –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤ —Ñ–æ—Ä–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
    }

    // –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –°–û–•–†–ê–ù–ï–ù–ò–Ø (–æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å IndexedDB)
    async saveConsultation() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ü–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω
        if (!this.currentPatient) {
            utils.showErrorMessage('–û—à–∏–±–∫–∞: –ø–∞—Ü–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
            return false;
        }

        const form = document.getElementById('consultationForm');
        
        if (!utils.validateForm(form)) {
            utils.showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return false;
        }

        utils.showLoading();

        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É –∏ –¥–æ–∫—Ç–æ—Ä—É)
            const consultationData = this.collectConsultationData();
            consultationData.patientId = this.currentPatient.id;
            consultationData.doctorId = this.doctorId;

            let savedConsultation;
            
            if (this.currentConsultation) {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                consultationData.id = this.currentConsultation.id;
                savedConsultation = await this.updateConsultation(this.currentConsultation.id, consultationData);
                utils.showSuccessMessage('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                savedConsultation = await this.addConsultation(consultationData);
                this.currentConsultation = savedConsultation;
                utils.showSuccessMessage('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞—Ä—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–≤–µ—Å, —Ä–æ—Å—Ç)
            await this.updatePatientMedicalData();

            console.log('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', consultationData);
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
            utils.showErrorMessage('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: ' + error.message);
            return false;
        } finally {
            utils.hideLoading();
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞
    async updatePatientMedicalData() {
        if (!this.currentPatient) return;

        const weight = parseFloat(document.getElementById('patientWeight').value);
        const height = parseFloat(document.getElementById('patientHeight').value);
        
        if (weight || height) {
            const updateData = {};
            if (weight) updateData.weight = weight;
            if (height) updateData.height = height;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ storageManager –∏–ª–∏ patientsManager
            if (window.storageManager && window.storageManager.isInitialized) {
                const patient = await storageManager.getPatient(this.currentPatient.id);
                if (patient) {
                    Object.assign(patient, updateData);
                    await storageManager.savePatient(patient);
                    console.log('üìä –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ IndexedDB');
                }
            } else if (window.patientsManager && window.patientsManager.updatePatient) {
                patientsManager.updatePatient(this.currentPatient.id, updateData);
                console.log('üìä –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ localStorage');
            }
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º—É
    async loadConsultationData(consultation) {
        this.currentConsultation = consultation;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        // –¢–∏–ø –ø—Ä–∏–µ–º–∞
        if (consultation.appointmentType) {
            const radio = document.querySelector(`input[name="appointmentType"][value="${consultation.appointmentType}"]`);
            if (radio) radio.checked = true;
        }
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        document.getElementById('complaints').value = consultation.complaints || '';
        document.getElementById('anamnesisDisease').value = consultation.anamnesisDisease || '';
        document.getElementById('objectiveExam').value = consultation.objectiveExam || '';
        document.getElementById('mainDiagnosis').value = consultation.mainDiagnosis || '';
        document.getElementById('examPlan').value = consultation.examPlan || '';
        document.getElementById('medications').value = consultation.medications || '';
        document.getElementById('regime').value = consultation.regime || '';
        document.getElementById('diet').value = consultation.diet || '';
        
        // –í–∏—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if (consultation.vitals) {
            document.getElementById('patientWeight').value = consultation.vitals.weight || '';
            document.getElementById('patientHeight').value = consultation.vitals.height || '';
            document.getElementById('heartRate').value = consultation.vitals.heartRate || '';
            document.getElementById('respiratoryRate').value = consultation.vitals.respiratoryRate || '';
            document.getElementById('spo2').value = consultation.vitals.spo2 || '';
            document.getElementById('temperature').value = consultation.vitals.temperature || '';
            
            if (consultation.vitals.bloodPressure) {
                document.getElementById('bloodPressure1').value = consultation.vitals.bloodPressure;
            }
        }
        
        // –î–∏–∞–≥–Ω–æ–∑—ã
        if (consultation.competingDiagnosis) {
            document.getElementById('competingCheckbox').checked = true;
            this.toggleDiagnosis('competing');
            document.getElementById('competingDiagnosis').value = consultation.competingDiagnosis;
        }
        
        if (consultation.backgroundDiagnosis) {
            document.getElementById('backgroundCheckbox').checked = true;
            this.toggleDiagnosis('background');
            document.getElementById('backgroundDiagnosis').value = consultation.backgroundDiagnosis;
        }
        
        if (consultation.complicationDiagnosis) {
            document.getElementById('complicationCheckbox').checked = true;
            this.toggleDiagnosis('complication');
            document.getElementById('complicationDiagnosis').value = consultation.complicationDiagnosis;
        }
        
        if (consultation.concomitantDiagnosis) {
            document.getElementById('concomitantCheckbox').checked = true;
            this.toggleDiagnosis('concomitant');
            document.getElementById('concomitantDiagnosis').value = consultation.concomitantDiagnosis;
        }
        
        console.log('üìã –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ñ–æ—Ä–º—É');
    }

    // –ú–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    toggleHeredity() {
        const heredityYes = document.getElementById('heredityYes').checked;
        const details = document.getElementById('heredityDetails');
        
        if (heredityYes) {
            details.style.display = 'block';
        } else {
            details.style.display = 'none';
            document.getElementById('heredityText').value = '';
        }
    }

    toggleAllergy() {
        const allergyYes = document.getElementById('allergyYes').checked;
        const details = document.getElementById('allergyDetails');
        
        if (allergyYes) {
            details.style.display = 'block';
        } else {
            details.style.display = 'none';
            document.getElementById('allergyText').value = '';
        }
    }

    // –õ–æ–≥–∏–∫–∞ –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ - –¥–∞–Ω–Ω—ã–µ –ù–ï —Ç–µ—Ä—è—é—Ç—Å—è –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≥–∞–ª–æ—á–∫–∏
    toggleHabit(habitType) {
        const checkbox = document.getElementById(habitType + 'Checkbox');
        const details = document.getElementById(habitType + 'Details');
        
        if (checkbox.checked) {
            details.style.display = 'block';
            details.classList.add('active');
        } else {
            details.style.display = 'none';
            details.classList.remove('active');
            // –ù–ï –æ—á–∏—â–∞–µ–º –ø–æ–ª—è - –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        }
    }

    toggleDiagnosis(type) {
        const checkbox = document.getElementById(type + 'Checkbox');
        const content = document.getElementById(type + 'Content');
        
        if (checkbox.checked) {
            content.style.display = 'block';
            content.classList.add('active');
        } else {
            content.style.display = 'none';
            content.classList.remove('active');
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≥–∞–ª–æ—á–∫–∏
            const textarea = content.querySelector('textarea');
            if (textarea) textarea.value = '';
        }
    }

    toggleNextVisitType() {
        const dateRadio = document.getElementById('nextVisitDate');
        const neededRadio = document.getElementById('nextVisitNeeded');
        const dateContainer = document.getElementById('nextVisitDateContainer');
        const neededContainer = document.getElementById('nextVisitNeededContainer');
        
        if (dateRadio.checked) {
            dateContainer.style.display = 'block';
            neededContainer.style.display = 'none';
        } else if (neededRadio.checked) {
            dateContainer.style.display = 'none';
            neededContainer.style.display = 'block';
        }
    }

    // –†–∞—Å—á–µ—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    calculateBMIandBSA() {
        const weight = parseFloat(document.getElementById('patientWeight').value);
        const height = parseFloat(document.getElementById('patientHeight').value);
        
        if (weight && height) {
            const bmi = utils.calculateBMI(weight, height);
            const bsa = utils.calculateBSA(weight, height);
            
            document.getElementById('patientBMI').value = bmi ? bmi.toFixed(1) : '';
            document.getElementById('patientBSA').value = bsa ? bsa.toFixed(2) : '';
        }
    }

    calculatePYI() {
        const years = parseFloat(document.getElementById('smokingYears').value);
        const daily = parseFloat(document.getElementById('smokingDaily').value);
        
        if (years && daily && years > 0 && daily > 0) {
            const pyi = (daily * years) / 20;
            document.getElementById('pyi').value = pyi.toFixed(1);
        } else {
            document.getElementById('pyi').value = '';
        }
    }

    calculateAverageBP() {
        const bp1 = document.getElementById('bloodPressure1').value;
        const bp2 = document.getElementById('bloodPressure2').value;
        const bp3 = document.getElementById('bloodPressure3').value;
        
        const bpValues = [bp1, bp2, bp3].filter(bp => bp && bp.includes('/'));
        
        if (bpValues.length > 0) {
            let totalSystolic = 0;
            let totalDiastolic = 0;
            let validCount = 0;
            
            bpValues.forEach(bp => {
                const parts = bp.split('/');
                if (parts.length === 2) {
                    const systolic = parseInt(parts[0]);
                    const diastolic = parseInt(parts[1]);
                    if (!isNaN(systolic) && !isNaN(diastolic)) {
                        totalSystolic += systolic;
                        totalDiastolic += diastolic;
                        validCount++;
                    }
                }
            });
            
            if (validCount > 0) {
                const avgSystolic = Math.round(totalSystolic / validCount);
                const avgDiastolic = Math.round(totalDiastolic / validCount);
                this.updateObjectiveExam(`${avgSystolic}/${avgDiastolic}`);
            }
        }
    }

    updateObjectiveExam(averageBP) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞
        const heartRate = document.getElementById('heartRate').value;
        const respiratoryRate = document.getElementById('respiratoryRate').value;
        const spo2 = document.getElementById('spo2').value;
        const temperature = document.getElementById('temperature').value;
        
        let vitalsText = '–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ. ';
        
        if (averageBP) vitalsText += `–ê–î ${averageBP} –º–º —Ä—Ç.—Å—Ç. `;
        if (heartRate) vitalsText += `–ß–°–° ${heartRate} —É–¥/–º–∏–Ω. `;
        if (respiratoryRate) vitalsText += `–ß–î–î ${respiratoryRate} –≤ –º–∏–Ω. `;
        if (spo2) vitalsText += `SpO‚ÇÇ ${spo2}%. `;
        if (temperature) vitalsText += `–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ${temperature}¬∞C. `;
        
        vitalsText += '–ö–æ–∂–Ω—ã–µ –ø–æ–∫—Ä–æ–≤—ã –æ–±—ã—á–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏. –û—Ç–µ–∫–æ–≤ –Ω–µ—Ç. –í –ª–µ–≥–∫–∏—Ö –¥—ã—Ö–∞–Ω–∏–µ –≤–µ–∑–∏–∫—É–ª—è—Ä–Ω–æ–µ, —Ö—Ä–∏–ø–æ–≤ –Ω–µ—Ç. –¢–æ–Ω—ã —Å–µ—Ä–¥—Ü–∞ —Ä–∏—Ç–º–∏—á–Ω—ã–µ, —à—É–º–æ–≤ –Ω–µ—Ç.';
        
        const currentText = document.getElementById('objectiveExam').value;
        if (!currentText || currentText.startsWith('–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ')) {
            document.getElementById('objectiveExam').value = vitalsText;
        }
    }

    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    collectConsultationData() {
        return {
            id: this.currentConsultation?.id || this.generateConsultationId(),
            date: new Date().toISOString(),
            appointmentType: document.querySelector('input[name="appointmentType"]:checked')?.value || '',
            complaints: document.getElementById('complaints').value,
            anamnesisDisease: document.getElementById('anamnesisDisease').value,
            heredity: this.getHeredityData(),
            allergy: this.getAllergyData(),
            habits: this.getHabitsData(),
            vitals: this.getVitalsData(),
            objectiveExam: document.getElementById('objectiveExam').value,
            mainDiagnosis: document.getElementById('mainDiagnosis').value,
            competingDiagnosis: document.getElementById('competingDiagnosis').value,
            backgroundDiagnosis: document.getElementById('backgroundDiagnosis').value,
            complicationDiagnosis: document.getElementById('complicationDiagnosis').value,
            concomitantDiagnosis: document.getElementById('concomitantDiagnosis').value,
            examPlan: document.getElementById('examPlan').value,
            medications: document.getElementById('medications').value,
            regime: document.getElementById('regime').value,
            diet: document.getElementById('diet').value,
            nextVisit: this.getNextVisitData()
        };
    }

    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ - –µ—Å–ª–∏ –µ—Å—Ç—å –õ–Æ–ë–û–ô —Ç–µ–∫—Å—Ç, –≤–∫–ª—é—á–∞–µ–º –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª
    getHabitsData() {
        const habits = [];
        
        // –ö—É—Ä–µ–Ω–∏–µ - —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å –õ–Æ–ë–ê–Ø –≤–≤–µ–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        const years = document.getElementById('smokingYears').value;
        const daily = document.getElementById('smokingDaily').value;
        const pyi = document.getElementById('pyi').value;
        
        if (years || daily || pyi) {
            let smokingText = '–ö—É—Ä–µ–Ω–∏–µ';
            if (years) smokingText += `: —Å—Ç–∞–∂ ${years} –ª–µ—Ç`;
            if (daily) smokingText += `, ${daily} —Å–∏–≥/–¥–µ–Ω—å`;
            if (pyi) smokingText += `, –ò–ö–ß ${pyi} –ø–∞—á–∫–∞/–ª–µ—Ç`;
            habits.push(smokingText);
        }
        
        // –ê–ª–∫–æ–≥–æ–ª—å - —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        const alcoholText = document.getElementById('alcoholText').value;
        if (alcoholText.trim()) {
            habits.push(`–ó–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª–µ–º: ${alcoholText}`);
        }
        
        // –ù–∞—Ä–∫–æ—Ç–∏–∫–∏ - —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        const drugsText = document.getElementById('drugsText').value;
        if (drugsText.trim()) {
            habits.push(`–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤ –∏ –ü–ê–í: ${drugsText}`);
        }
        
        // –°—Ç—Ä–µ—Å—Å - —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        const stressText = document.getElementById('stressText').value;
        if (stressText.trim()) {
            habits.push(`–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å: ${stressText}`);
        }
        
        return habits.join('. ');
    }

    getHeredityData() {
        const heredityNo = document.getElementById('heredityNo').checked;
        const heredityYes = document.getElementById('heredityYes').checked;
        const heredityText = document.getElementById('heredityText').value;
        
        if (heredityNo) return '–ù–µ –æ—Ç—è–≥–æ—â–µ–Ω–∞';
        if (heredityYes) return heredityText || '–û—Ç—è–≥–æ—â–µ–Ω–∞';
        return '';
    }

    getAllergyData() {
        const allergyNo = document.getElementById('allergyNo').checked;
        const allergyYes = document.getElementById('allergyYes').checked;
        const allergyText = document.getElementById('allergyText').value;
        
        if (allergyNo) return '–ù–µ –æ—Ç—è–≥–æ—â–µ–Ω';
        if (allergyYes) return allergyText || '–û—Ç—è–≥–æ—â–µ–Ω';
        return '';
    }

    getVitalsData() {
        return {
            heartRate: document.getElementById('heartRate').value,
            bloodPressure: this.getBestBP(),
            respiratoryRate: document.getElementById('respiratoryRate').value,
            spo2: document.getElementById('spo2').value,
            temperature: document.getElementById('temperature').value,
            weight: document.getElementById('patientWeight').value,
            height: document.getElementById('patientHeight').value,
            bmi: document.getElementById('patientBMI').value,
            bsa: document.getElementById('patientBSA').value
        };
    }

    getBestBP() {
        const bp1 = document.getElementById('bloodPressure1').value;
        const bp2 = document.getElementById('bloodPressure2').value;
        const bp3 = document.getElementById('bloodPressure3').value;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
        if (bp1 && bp2 && bp3) {
            return this.calculateAverageBPValue([bp1, bp2, bp3]);
        } else if (bp1) {
            return bp1;
        } else if (bp2) {
            return bp2;
        } else if (bp3) {
            return bp3;
        }
        return '';
    }

    calculateAverageBPValue(bpArray) {
        let totalSystolic = 0;
        let totalDiastolic = 0;
        let validCount = 0;
        
        bpArray.forEach(bp => {
            if (bp && bp.includes('/')) {
                const parts = bp.split('/');
                if (parts.length === 2) {
                    const systolic = parseInt(parts[0]);
                    const diastolic = parseInt(parts[1]);
                    if (!isNaN(systolic) && !isNaN(diastolic)) {
                        totalSystolic += systolic;
                        totalDiastolic += diastolic;
                        validCount++;
                    }
                }
            }
        });
        
        if (validCount > 0) {
            const avgSystolic = Math.round(totalSystolic / validCount);
            const avgDiastolic = Math.round(totalDiastolic / validCount);
            return `${avgSystolic}/${avgDiastolic}`;
        }
        
        return '';
    }

    getNextVisitData() {
        const dateRadio = document.getElementById('nextVisitDate');
        const neededRadio = document.getElementById('nextVisitNeeded');
        
        if (dateRadio && dateRadio.checked) {
            const visitDate = document.getElementById('nextVisit').value;
            if (visitDate) {
                return new Date(visitDate).toLocaleDateString('ru-RU');
            }
        } else if (neededRadio && neededRadio.checked) {
            const reason = document.getElementById('nextVisitReason').value;
            return reason || '–ü–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏';
        }
        
        return '';
    }

    // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å IndexedDB)
    async addConsultation(consultationData) {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if (window.storageManager && window.storageManager.isInitialized) {
                consultationData.doctorId = this.doctorId;
                const savedId = await storageManager.saveConsultation(consultationData);
                consultationData.id = savedId;
                console.log('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ IndexedDB:', savedId);
            }
            
            // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            this.consultations.push(consultationData);
            await this.saveConsultations();
            
            return consultationData;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    async updateConsultation(consultationId, updateData) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ IndexedDB –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if (window.storageManager && window.storageManager.isInitialized) {
                updateData.id = consultationId;
                updateData.doctorId = this.doctorId;
                await storageManager.saveConsultation(updateData);
                console.log('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ IndexedDB:', consultationId);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
            const index = this.consultations.findIndex(c => c.id === consultationId);
            if (index >= 0) {
                this.consultations[index] = { ...this.consultations[index], ...updateData };
                await this.saveConsultations();
                return this.consultations[index];
            }
            
            return null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    async getConsultation(consultationId) {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
        let consultation = this.consultations.find(c => c.id === consultationId);
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏ –µ—Å—Ç—å IndexedDB, –∏—â–µ–º —Ç–∞–º
        if (!consultation && window.storageManager && window.storageManager.isInitialized) {
            const allConsultations = await storageManager.getAllConsultations();
            consultation = allConsultations.find(c => c.id === consultationId);
        }
        
        return consultation || null;
    }

    async getPatientConsultations(patientId) {
        try {
            // –ï—Å–ª–∏ –µ—Å—Ç—å IndexedDB, –ø–æ–ª—É—á–∞–µ–º –æ—Ç—Ç—É–¥–∞
            if (window.storageManager && window.storageManager.isInitialized) {
                const consultations = await storageManager.getPatientConsultations(patientId);
                return consultations;
            } else {
                // –ò–Ω–∞—á–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
                return this.consultations.filter(c => c.patientId === patientId);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–∞—Ü–∏–µ–Ω—Ç–∞:', error);
            return [];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
    async getAllConsultations() {
        try {
            if (window.storageManager && window.storageManager.isInitialized) {
                return await storageManager.getAllConsultations();
            } else {
                return this.consultations;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:', error);
            return this.consultations;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    clearConsultationFields() {
        // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –æ—Å—Ç–∞–≤–ª—è—è –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        const consultationFields = [
            'complaints', 'anamnesisDisease', 'objectiveExam', 'mainDiagnosis',
            'examPlan', 'medications', 'regime', 'diet',
            'heartRate', 'respiratoryRate', 'spo2', 'temperature',
            'bloodPressure1', 'bloodPressure2', 'bloodPressure3'
        ];
        
        consultationFields.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (field) field.value = '';
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏ –∏ —á–µ–∫–±–æ–∫—Å—ã
        document.querySelectorAll('#consultationForm input[type="radio"]').forEach(radio => radio.checked = false);
        document.querySelectorAll('#consultationForm input[type="checkbox"]').forEach(checkbox => {
            checkbox.checked = false;
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
            if (checkbox.id.includes('Checkbox')) {
                const detailsId = checkbox.id.replace('Checkbox', 'Details');
                const details = document.getElementById(detailsId);
                if (details) details.style.display = 'none';
            }
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫–∏ –¥–∏–∞–≥–Ω–æ–∑–æ–≤
        ['competing', 'background', 'complication', 'concomitant'].forEach(type => {
            const content = document.getElementById(type + 'Content');
            if (content) content.style.display = 'none';
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫–∏ –∞–Ω–∞–º–Ω–µ–∑–∞ –∂–∏–∑–Ω–∏
        const heredityDetails = document.getElementById('heredityDetails');
        const allergyDetails = document.getElementById('allergyDetails');
        if (heredityDetails) heredityDetails.style.display = 'none';
        if (allergyDetails) allergyDetails.style.display = 'none';
    }

    generateConsultationId() {
        return Date.now().toString();
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const consultationsManager = new ConsultationsManager();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.consultationsManager = consultationsManager;