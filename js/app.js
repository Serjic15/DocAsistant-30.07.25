/**
 * DocAssistantPro - –ü–û–õ–ù–´–ô –≥–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è v2.1
 * CardioAssistantPro v2.1 - –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–≥–∏–∫–æ–π –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
 * –ü–†–ï–ú–ò–£–ú –í–ï–†–°–ò–Ø: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: Z-index, –æ–¥–Ω–∞ –ø–∞–Ω–µ–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π, –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ü–≤–µ—Ç–∞
 */

class DocAssistantApp {
    constructor() {
        this.currentPatient = null;
        this.currentTab = 'schedule';
        this.isInitialized = false;
        this.navigationHistory = [];
        this.searchResults = [];
        this.appVersion = 'CardioAssistantPro v2.1';
        this.currentView = 'list';
        this.currentConsultation = null;
        this.previousView = null;
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        this.activeConsultations = new Map();
        this.currentActivePatientId = null;
        this.consultationStates = {
            ACTIVE: 'active',
            COMPLETED: 'completed',
            CANCELLED: 'cancelled',
            SAVED: 'saved'
        };
        
        // –î–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã"
        this.myPatients = [];
        this.myPatientsSearchQuery = '';
        this.myPatientsFilterType = 'all';
        this.doctorId = 'default';
        this.starredPatients = new Set();
        
        // –ü–†–ï–ú–ò–£–ú: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        this.cache = new Map();
        this.debounceTimers = new Map();
        this.lastSearchQuery = '';
        this.isLoading = false;
        
        // –ü–†–ï–ú–ò–£–ú: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        this.errorCount = 0;
        this.maxErrors = 10;
        this.criticalErrors = [];
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        this.handleGlobalError = this.handleGlobalError.bind(this);
        this.handleUnhandledRejection = this.handleUnhandledRejection.bind(this);
    }

    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DocAssistantPro - CardioAssistantPro v2.1...');
            
            // –ü–†–ï–ú–ò–£–ú: –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            this.setupGlobalErrorHandling();
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
            this.setDefaultActiveTab();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
            this.initializeDateTime();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            await this.initializeManagers();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∫–ª–∞–¥–æ–∫
            await this.loadTabContents();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.initializeInterface();
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –û–î–ù–û–ô –ø–∞–Ω–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            this.initializeActiveConsultationsPanel();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            this.loadStarredPatients();
            await this.loadMyPatients();
            this.loadActiveConsultations();
            this.preloadCriticalData();
            
            console.log('‚úÖ DocAssistantPro - CardioAssistantPro v2.1 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            this.isInitialized = true;
            
            this.showNotification('–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ', 'success', 2000);
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.handleCriticalError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', error);
        }
    }

    // === –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï–î–ò–ù–ê–Ø –ü–ê–ù–ï–õ–¨ –ê–ö–¢–ò–í–ù–´–• –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ô ===

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –û–î–ù–û–ô –ø—Ä–æ–¥—É–º–∞–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –ø–æ–¥ —Ö–µ–¥–µ—Ä–æ–º
    initializeActiveConsultationsPanel() {
        try {
            if (!document.getElementById('activeConsultationsPanel')) {
                this.createActiveConsultationsPanel();
            }
            
            this.updateActiveConsultationsPanel();
            console.log('üîß –ï–¥–∏–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:', error);
            this.logError('Init Active Consultations Panel Error', error);
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: HTML –µ–¥–∏–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º z-index
    createActiveConsultationsPanel() {
        const panelHTML = `
            <div id="activeConsultationsPanel" class="active-consultations-panel-premium">
                <div class="active-consultations-header-premium">
                    <div class="panel-title-premium">
                        <div class="panel-icon-premium">
                            <i class="fas fa-user-md"></i>
                        </div>
                        <div class="panel-text-premium">
                            <span class="title-main-premium">–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</span>
                            <span class="title-count-premium" id="activeConsultationsCount">(0)</span>
                        </div>
                    </div>
                    <div class="panel-controls-premium">
                        <button class="btn-panel-action-premium" onclick="app.addNewConsultationFromPanel()">
                            <i class="fas fa-plus"></i>
                            <span>–ù–æ–≤–∞—è</span>
                        </button>
                        <div class="panel-toggle-premium" onclick="app.toggleActiveConsultationsPanel()">
                            <i class="fas fa-chevron-up" id="panelToggleIcon"></i>
                        </div>
                    </div>
                </div>
                <div class="active-consultations-content-premium" id="activeConsultationsContent">
                    <div class="no-active-consultations-premium">
                        <div class="no-consultations-icon-premium">
                            <i class="fas fa-calendar-check"></i>
                        </div>
                        <div class="no-consultations-text-premium">
                            <span class="no-consultations-title">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π</span>
                            <small class="no-consultations-hint">–û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–ø–∏—Å—å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</small>
                        </div>
                    </div>
                </div>
            </div>

            <style>
            /* –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ç–∏–ª–∏ –µ–¥–∏–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º z-index */
            .active-consultations-panel-premium {
                position: fixed;
                top: 98px; /* –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥ —Ö–µ–¥–µ—Ä–æ–º, –Ω–æ –ù–ê–î –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞–º–∏ */
                left: 0;
                right: 0;
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                border-bottom: 1px solid #e2e8f0;
                box-shadow: 0 4px 20px rgba(0,0,0,0.08);
                z-index: 95; /* –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∏–∂–µ —Ö–µ–¥–µ—Ä–∞ (100), –Ω–æ –≤—ã—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (90) */
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                backdrop-filter: blur(10px);
                border-top: 3px solid var(--primary-color);
            }

            .active-consultations-panel-premium.collapsed {
                transform: translateY(-100%);
                box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            }

            .active-consultations-header-premium {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 1rem 2rem;
                background: linear-gradient(135deg, #2E86AB 0%, #1D3557 100%);
                color: white;
                position: relative;
                overflow: hidden;
            }

            .active-consultations-header-premium::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 60 60"><defs><pattern id="grid" width="6" height="6" patternUnits="userSpaceOnUse"><path d="M 6 0 L 0 0 0 6" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="60" height="60" fill="url(%23grid)"/></svg>');
                opacity: 0.3;
            }

            .panel-title-premium {
                display: flex;
                align-items: center;
                gap: 1rem;
                position: relative;
                z-index: 2;
            }

            .panel-icon-premium {
                width: 48px;
                height: 48px;
                background: rgba(255,255,255,0.15);
                border-radius: 12px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 1.2rem;
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255,255,255,0.2);
                box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            }

            .panel-text-premium {
                display: flex;
                flex-direction: column;
            }

            .title-main-premium {
                font-size: 1.1rem;
                font-weight: 700;
                margin: 0;
                line-height: 1.2;
            }

            .title-count-premium {
                font-size: 0.85rem;
                opacity: 0.9;
                font-weight: 500;
                margin-top: 0.2rem;
            }

            .panel-controls-premium {
                display: flex;
                align-items: center;
                gap: 1rem;
                position: relative;
                z-index: 2;
            }

            .btn-panel-action-premium {
                background: rgba(255,255,255,0.15);
                border: 1px solid rgba(255,255,255,0.3);
                color: white;
                padding: 0.6rem 1.2rem;
                border-radius: 10px;
                font-weight: 600;
                font-size: 0.85rem;
                display: flex;
                align-items: center;
                gap: 0.5rem;
                cursor: pointer;
                transition: all 0.3s ease;
                backdrop-filter: blur(10px);
            }

            .btn-panel-action-premium:hover {
                background: rgba(255,255,255,0.25);
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            }

            .panel-toggle-premium {
                width: 40px;
                height: 40px;
                background: rgba(255,255,255,0.15);
                border: 1px solid rgba(255,255,255,0.3);
                border-radius: 10px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                transition: all 0.3s ease;
                backdrop-filter: blur(10px);
            }

            .panel-toggle-premium:hover {
                background: rgba(255,255,255,0.25);
                transform: scale(1.05);
            }

            .panel-toggle-premium i {
                color: white;
                font-size: 1rem;
                transition: transform 0.3s ease;
            }

            .active-consultations-content-premium {
                max-height: 120px;
                overflow-y: auto;
                overflow-x: hidden;
                padding: 1rem 2rem;
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                transition: all 0.4s ease;
            }

            .active-consultations-content-premium::-webkit-scrollbar {
                width: 6px;
            }

            .active-consultations-content-premium::-webkit-scrollbar-track {
                background: #f1f3f4;
                border-radius: 3px;
            }

            .active-consultations-content-premium::-webkit-scrollbar-thumb {
                background: var(--primary-color);
                border-radius: 3px;
            }

            .no-active-consultations-premium {
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 1rem;
                min-height: 80px;
                color: #6c757d;
                text-align: center;
            }

            .no-consultations-icon-premium {
                font-size: 2rem;
                color: #cbd5e0;
            }

            .no-consultations-text-premium {
                display: flex;
                flex-direction: column;
                gap: 0.25rem;
            }

            .no-consultations-title {
                font-weight: 600;
                color: #495057;
                font-size: 1rem;
            }

            .no-consultations-hint {
                color: #6c757d;
                font-size: 0.85rem;
            }

            /* –ü–†–ï–ú–ò–£–ú: –°—Ç–∏–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π */
            .active-consultations-scroll-premium {
                display: flex;
                gap: 1rem;
                overflow-x: auto;
                padding: 0.5rem 0;
                scroll-behavior: smooth;
            }

            .active-consultations-scroll-premium::-webkit-scrollbar {
                height: 6px;
            }

            .active-consultations-scroll-premium::-webkit-scrollbar-track {
                background: #f1f3f4;
                border-radius: 3px;
            }

            .active-consultations-scroll-premium::-webkit-scrollbar-thumb {
                background: var(--primary-color);
                border-radius: 3px;
            }

            .active-consultation-item-premium {
                flex: 0 0 auto;
                min-width: 280px;
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                border: 2px solid #e2e8f0;
                border-radius: 12px;
                padding: 1rem;
                cursor: pointer;
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                position: relative;
                overflow: hidden;
                box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            }

            .active-consultation-item-premium:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.12);
                border-color: var(--primary-color);
            }

            .active-consultation-item-premium.current {
                border-color: var(--primary-color);
                background: linear-gradient(135deg, #e3f2fd 0%, #f0f8ff 100%);
                box-shadow: 0 4px 15px rgba(46, 134, 171, 0.2);
            }

            .active-consultation-item-premium::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 3px;
                background: linear-gradient(90deg, var(--primary-color), var(--success-color));
            }

            .consultation-header-premium {
                display: flex;
                align-items: center;
                justify-content: space-between;
                margin-bottom: 0.75rem;
            }

            .consultation-patient-info-premium {
                display: flex;
                align-items: center;
                gap: 0.75rem;
            }

            .consultation-avatar-premium {
                width: 44px;
                height: 44px;
                background: linear-gradient(135deg, var(--primary-color), #246185);
                border-radius: 10px;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-weight: 700;
                font-size: 0.9rem;
                position: relative;
                box-shadow: 0 4px 12px rgba(46, 134, 171, 0.3);
            }

            .consultation-status-dot-premium {
                position: absolute;
                bottom: -2px;
                right: -2px;
                width: 12px;
                height: 12px;
                border-radius: 50%;
                border: 2px solid white;
                box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            }

            .consultation-status-dot-premium.active {
                background: #22c55e;
                animation: pulse-status 2s infinite;
            }

            @keyframes pulse-status {
                0% { transform: scale(1); opacity: 1; }
                50% { transform: scale(1.1); opacity: 0.8; }
                100% { transform: scale(1); opacity: 1; }
            }

            .consultation-details-premium {
                flex: 1;
            }

            .patient-name-premium {
                font-weight: 700;
                color: #1a202c;
                font-size: 0.95rem;
                margin-bottom: 0.25rem;
                line-height: 1.2;
            }

            .consultation-time-premium {
                color: #6c757d;
                font-size: 0.8rem;
                font-weight: 500;
                display: flex;
                align-items: center;
                gap: 0.25rem;
            }

            .consultation-actions-premium {
                display: flex;
                gap: 0.5rem;
            }

            .btn-consultation-action-premium {
                width: 32px;
                height: 32px;
                border: none;
                border-radius: 8px;
                background: rgba(108, 117, 125, 0.1);
                color: #6c757d;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                transition: all 0.2s ease;
                font-size: 0.8rem;
            }

            .btn-consultation-action-premium:hover {
                background: rgba(220, 53, 69, 0.1);
                color: #dc3545;
                transform: scale(1.1);
            }

            /* –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥ –ø–∞–Ω–µ–ª—å */
            .main-wrapper {
                padding-top: calc(1.5rem + 80px); /* –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–∞–Ω–µ–ª–∏ */
                transition: padding-top 0.4s ease;
            }

            .active-consultations-panel-premium.collapsed + .main-wrapper {
                padding-top: 1.5rem; /* –û–±—ã—á–Ω—ã–π –æ—Ç—Å—Ç—É–ø –∫–æ–≥–¥–∞ –ø–∞–Ω–µ–ª—å —Å–≤–µ—Ä–Ω—É—Ç–∞ */
            }

            /* –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï –¶–í–ï–¢–ê - –ü—Ä–µ–º–∏—É–º –ø–∞–ª–∏—Ç—Ä–∞ */
            :root {
                --medical-primary: #2E86AB;
                --medical-success: #16a085;
                --medical-info: #3498db;
                --medical-warning: #f39c12;
                --medical-danger: #e74c3c;
                --medical-light: #ecf0f1;
                --medical-dark: #2c3e50;
                --medical-accent: #9b59b6;
            }

            @media (max-width: 768px) {
                .active-consultations-panel-premium {
                    top: 85px;
                }

                .active-consultations-header-premium {
                    padding: 0.75rem 1rem;
                }

                .active-consultations-content-premium {
                    padding: 0.75rem 1rem;
                    max-height: 100px;
                }

                .panel-icon-premium {
                    width: 40px;
                    height: 40px;
                    font-size: 1rem;
                }

                .active-consultation-item-premium {
                    min-width: 240px;
                    padding: 0.75rem;
                }

                .main-wrapper {
                    padding-top: calc(1rem + 70px);
                }
            }
            </style>
        `;

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å—Ç–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø–æ—Å–ª–µ —Ö–µ–¥–µ—Ä–∞
        const header = document.querySelector('.medical-header');
        if (header) {
            header.insertAdjacentHTML('afterend', panelHTML);
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    updateActiveConsultationsPanel() {
        const content = document.getElementById('activeConsultationsContent');
        const countElement = document.getElementById('activeConsultationsCount');
        
        if (!content) return;

        const consultationsCount = this.activeConsultations.size;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        if (countElement) {
            countElement.textContent = consultationsCount > 0 ? `(${consultationsCount})` : '(0)';
        }

        if (consultationsCount === 0) {
            content.innerHTML = `
                <div class="no-active-consultations-premium">
                    <div class="no-consultations-icon-premium">
                        <i class="fas fa-calendar-check"></i>
                    </div>
                    <div class="no-consultations-text-premium">
                        <span class="no-consultations-title">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π</span>
                        <small class="no-consultations-hint">–û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–ø–∏—Å—å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</small>
                    </div>
                </div>
            `;
        } else {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            const consultationsHTML = `
                <div class="active-consultations-scroll-premium">
                    ${Array.from(this.activeConsultations.entries()).map(([patientId, consultation]) => {
                        const isActive = patientId === this.currentActivePatientId;
                        const initials = this.getPatientInitials(consultation.patient);
                        const timeElapsed = this.getTimeElapsed(consultation.startTime);
                        
                        return `
                            <div class="active-consultation-item-premium ${isActive ? 'current' : ''}" 
                                 onclick="app.switchToPatientCard('${patientId}')"
                                 title="${consultation.patient.name} - ${timeElapsed}">
                                <div class="consultation-header-premium">
                                    <div class="consultation-patient-info-premium">
                                        <div class="consultation-avatar-premium">
                                            <span>${initials}</span>
                                            <div class="consultation-status-dot-premium ${consultation.state}"></div>
                                        </div>
                                        <div class="consultation-details-premium">
                                            <div class="patient-name-premium">${this.getPatientShortName(consultation.patient)}</div>
                                            <div class="consultation-time-premium">
                                                <i class="fas fa-clock"></i>
                                                ${timeElapsed}
                                            </div>
                                        </div>
                                    </div>
                                    <div class="consultation-actions-premium">
                                        <button class="btn-consultation-action-premium" 
                                                onclick="event.stopPropagation(); app.promptCloseConsultation('${patientId}')"
                                                title="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        `;
                    }).join('')}
                </div>
            `;

            content.innerHTML = consultationsHTML;
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏
    toggleActiveConsultationsPanel() {
        const panel = document.getElementById('activeConsultationsPanel');
        const content = document.getElementById('activeConsultationsContent');
        const toggleIcon = document.getElementById('panelToggleIcon');
        
        if (!panel || !content || !toggleIcon) return;

        const isCollapsed = panel.classList.contains('collapsed');
        
        if (isCollapsed) {
            // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º
            panel.classList.remove('collapsed');
            toggleIcon.className = 'fas fa-chevron-up';
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
            setTimeout(() => {
                content.style.opacity = '1';
                content.style.transform = 'translateY(0)';
            }, 100);
        } else {
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            panel.classList.add('collapsed');
            toggleIcon.className = 'fas fa-chevron-down';
        }
    }

    // === –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ô ===

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    createActiveConsultation(patient, appointmentId = null) {
        try {
            const patientId = patient.id;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
            if (this.activeConsultations.has(patientId)) {
                this.switchToPatientCard(patientId);
                return;
            }

            const consultation = {
                id: this.generateConsultationId(),
                patient: patient,
                appointmentId: appointmentId,
                startTime: new Date().toISOString(),
                state: this.consultationStates.ACTIVE,
                data: {},
                isModified: false
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            this.activeConsultations.set(patientId, consultation);
            this.currentActivePatientId = patientId;
            this.currentPatient = patient;
            this.currentConsultation = consultation;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.saveActiveConsultations();
            this.updateActiveConsultationsPanel();

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π
            this.showPatientCardWithActiveConsultation(patient);

            console.log('üìù –°–æ–∑–¥–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:', patient.name);
            this.showNotification(`–ù–∞—á–∞—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: ${patient.name}`, 'success', 3000);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
            this.logError('Create Active Consultation Error', error);
            this.showErrorMessage('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞—Ä—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–ù–ï –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏)
    switchToPatientCard(patientId) {
        try {
            const consultation = this.activeConsultations.get(patientId);
            if (!consultation) {
                console.error('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', patientId);
                return;
            }

            this.currentActivePatientId = patientId;
            this.currentPatient = consultation.patient;
            this.currentConsultation = consultation;

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å (–≤—ã–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é)
            this.updateActiveConsultationsPanel();

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π
            this.showPatientCardWithActiveConsultation(consultation.patient);

            console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞—Ä—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', consultation.patient.name);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞—Ä—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', error);
            this.logError('Switch To Patient Card Error', error);
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π
    showPatientCardWithActiveConsultation(patient) {
        try {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —Ç–∞–º
            if (this.currentTab !== 'schedule') {
                this.switchToTab('schedule');
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            const scheduleContent = document.getElementById('scheduleContent');
            if (!scheduleContent) return;

            // –°–∫—Ä—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            const scheduleGrid = scheduleContent.querySelector('.schedule-grid-container');
            if (scheduleGrid) {
                scheduleGrid.style.display = 'none';
            }

            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞
            let patientCardContainer = scheduleContent.querySelector('.patient-card-container');
            if (!patientCardContainer) {
                patientCardContainer = document.createElement('div');
                patientCardContainer.className = 'patient-card-container';
                scheduleContent.appendChild(patientCardContainer);
            }

            // –ü–†–ï–ú–ò–£–ú: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º
            patientCardContainer.innerHTML = this.getPatientCardWithActiveConsultationHTML(patient);
            patientCardContainer.style.display = 'block';

            console.log('üë§ –ü–æ–∫–∞–∑–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞:', error);
            this.logError('Show Patient Card Error', error);
        }
    }

    // –ü–†–ï–ú–ò–£–ú: HTML –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º
    getPatientCardWithActiveConsultationHTML(patient) {
        const activeConsultation = this.activeConsultations.get(patient.id);
        const consultations = patient.consultations || [];
        
        return `
            <div class="patient-card-wrapper-premium">
                <!-- –ü–†–ï–ú–ò–£–ú: –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º -->
                <div class="patient-card-navigation-premium">
                    <button class="btn-nav-premium btn-nav-back" onclick="app.backToSchedule()">
                        <i class="fas fa-arrow-left"></i>
                        <span>–ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é</span>
                    </button>
                    <div class="patient-card-breadcrumb-premium">
                        <span class="breadcrumb-item-premium" onclick="app.backToSchedule()">
                            <i class="fas fa-calendar-alt"></i>
                            –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                        </span>
                        <i class="fas fa-chevron-right breadcrumb-separator"></i>
                        <span class="breadcrumb-item-premium active">
                            <i class="fas fa-user-md"></i>
                            –ö–∞—Ä—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
                        </span>
                    </div>
                </div>

                <!-- –ü–†–ï–ú–ò–£–ú: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞ -->
                <div class="patient-card-header-premium">
                    <div class="patient-info-section-premium">
                        <div class="patient-avatar-premium-large">
                            <span class="patient-initials-premium-large">${this.getPatientInitials(patient)}</span>
                            <div class="patient-status-indicator ${activeConsultation ? 'active' : 'inactive'}"></div>
                        </div>
                        <div class="patient-details-premium">
                            <h2 class="patient-name-premium-main">${this.getPatientDisplayName(patient)}</h2>
                            <div class="patient-meta-premium">
                                <div class="patient-meta-item">
                                    <i class="fas fa-birthday-cake"></i>
                                    <span>${this.getPatientAge(patient)} –ª–µ—Ç</span>
                                </div>
                                <div class="patient-meta-item">
                                    <i class="fas fa-venus-mars"></i>
                                    <span>${this.getPatientGender(patient)}</span>
                                </div>
                                <div class="patient-meta-item">
                                    <i class="fas fa-phone"></i>
                                    <span>${patient.phone || patient.personalInfo?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="patient-actions-premium">
                        ${activeConsultation ? `
                            <button class="btn-premium btn-premium-warning" onclick="app.continueActiveConsultation('${patient.id}')">
                                <i class="fas fa-edit"></i>
                                <span>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</span>
                                <div class="btn-glow"></div>
                            </button>
                        ` : `
                            <button class="btn-premium btn-premium-primary" onclick="app.startNewConsultation('${patient.id}')">
                                <i class="fas fa-plus-circle"></i>
                                <span>–ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</span>
                                <div class="btn-glow"></div>
                            </button>
                        `}
                        <button class="btn-premium btn-premium-info" onclick="app.exportPatientData('${patient.id}')">
                            <i class="fas fa-download"></i>
                            <span>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</span>
                        </button>
                    </div>
                </div>

                <!-- –ü–†–ï–ú–ò–£–ú: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ -->
                <div class="patient-consultations-section-premium">
                    <div class="consultations-header-premium">
                        <h4 class="consultations-title">
                            <i class="fas fa-history"></i>
                            –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
                        </h4>
                        <span class="consultations-count-badge">
                            ${consultations.length + (activeConsultation ? 1 : 0)} –∑–∞–ø–∏—Å–µ–π
                        </span>
                    </div>

                    <div class="consultations-list-premium">
                        ${activeConsultation ? `
                            <!-- –í–´–î–ï–õ–ï–ù–ù–ê–Ø –ê–ö–¢–ò–í–ù–ê–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø -->
                            <div class="consultation-item-premium active-consultation-highlight">
                                <div class="consultation-status-badge-premium active">
                                    <i class="fas fa-edit"></i>
                                    <span>–í —Ä–∞–±–æ—Ç–µ</span>
                                    <div class="status-pulse"></div>
                                </div>
                                <div class="consultation-content-premium">
                                    <div class="consultation-header-row-premium">
                                        <div class="consultation-date-time-premium">
                                            <i class="fas fa-clock"></i>
                                            <span class="consultation-date">${this.formatDateTime(activeConsultation.startTime)}</span>
                                            <span class="consultation-duration-premium">(${this.getTimeElapsed(activeConsultation.startTime)})</span>
                                        </div>
                                        <div class="consultation-type-premium">
                                            <span class="type-badge-premium active">–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</span>
                                        </div>
                                    </div>
                                    <div class="consultation-details-premium">
                                        <div class="consultation-detail-item-premium">
                                            <i class="fas fa-info-circle"></i>
                                            <strong>–°—Ç–∞—Ç—É—Å:</strong> 
                                            <span class="status-text active">–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã</span>
                                        </div>
                                        <div class="consultation-detail-item-premium">
                                            <i class="fas fa-user-md"></i>
                                            <strong>–°–µ–∞–Ω—Å:</strong> 
                                            <span>–¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∞–Ω—Å</span>
                                        </div>
                                    </div>
                                    <div class="consultation-actions-premium">
                                        <button class="btn-consultation-premium btn-consultation-continue" onclick="app.continueActiveConsultation('${patient.id}')">
                                            <i class="fas fa-edit"></i>
                                            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                                        </button>
                                        <button class="btn-consultation-premium btn-consultation-complete" onclick="app.completeActiveConsultation('${patient.id}')">
                                            <i class="fas fa-check"></i>
                                            –ó–∞–≤–µ—Ä—à–∏—Ç—å
                                        </button>
                                        <button class="btn-consultation-premium btn-consultation-cancel" onclick="app.promptCloseConsultation('${patient.id}')">
                                            <i class="fas fa-times"></i>
                                            –û—Ç–º–µ–Ω–∏—Ç—å
                                        </button>
                                    </div>
                                </div>
                            </div>
                        ` : ''}

                        ${consultations.length > 0 ? consultations.map((consultation, index) => `
                            <div class="consultation-item-premium">
                                <div class="consultation-status-badge-premium completed">
                                    <i class="fas fa-check-circle"></i>
                                    <span>–ó–∞–≤–µ—Ä—à–µ–Ω–∞</span>
                                </div>
                                <div class="consultation-content-premium">
                                    <div class="consultation-header-row-premium">
                                        <div class="consultation-date-time-premium">
                                            <i class="fas fa-calendar"></i>
                                            <span class="consultation-date">${this.formatDateTime(consultation.date)}</span>
                                        </div>
                                        <div class="consultation-type-premium">
                                            <span class="type-badge-premium ${consultation.appointmentType || 'primary'}">
                                                ${this.getAppointmentTypeText(consultation.appointmentType)}
                                            </span>
                                        </div>
                                    </div>
                                    <div class="consultation-details-premium">
                                        <div class="consultation-detail-item-premium">
                                            <i class="fas fa-comment-medical"></i>
                                            <strong>–ñ–∞–ª–æ–±—ã:</strong> 
                                            <span>${consultation.complaints || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</span>
                                        </div>
                                        <div class="consultation-detail-item-premium">
                                            <i class="fas fa-diagnoses"></i>
                                            <strong>–î–∏–∞–≥–Ω–æ–∑:</strong> 
                                            <span>${consultation.mainDiagnosis || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                                        </div>
                                    </div>
                                    <div class="consultation-actions-premium">
                                        <button class="btn-consultation-premium btn-consultation-view" onclick="app.viewConsultationDetails('${consultation.id}')">
                                            <i class="fas fa-eye"></i>
                                            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                        </button>
                                        <button class="btn-consultation-premium btn-consultation-copy" onclick="app.copyConsultation('${consultation.id}')">
                                            <i class="fas fa-copy"></i>
                                            –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                                        </button>
                                    </div>
                                </div>
                            </div>
                        `).join('') : `
                            <div class="no-consultations-premium">
                                <div class="no-consultations-icon-premium">
                                    <i class="fas fa-clipboard-list"></i>
                                </div>
                                <div class="no-consultations-text-premium">
                                    <h5>–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø—É—Å—Ç–∞</h5>
                                    <p>–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å</p>
                                    <small class="text-muted">–í—Å–µ –ø—Ä–æ—à–ª—ã–µ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞</small>
                                </div>
                            </div>
                        `}
                    </div>
                </div>
            </div>

            <style>
            /* –ü–†–ï–ú–ò–£–ú: –°—Ç–∏–ª–∏ –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º */
            .patient-card-wrapper-premium {
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                border-radius: 16px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.08);
                overflow: hidden;
                border: 1px solid #e2e8f0;
            }

            .patient-card-navigation-premium {
                background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
                padding: 1rem 2rem;
                border-bottom: 1px solid #e2e8f0;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .btn-nav-premium {
                background: linear-gradient(135deg, var(--primary-color) 0%, #246185 100%);
                color: white;
                border: none;
                padding: 0.75rem 1.5rem;
                border-radius: 10px;
                font-weight: 600;
                display: flex;
                align-items: center;
                gap: 0.5rem;
                cursor: pointer;
                transition: all 0.3s ease;
                box-shadow: 0 4px 12px rgba(46, 134, 171, 0.3);
            }

            .btn-nav-premium:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(46, 134, 171, 0.4);
            }

            .patient-card-breadcrumb-premium {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                font-size: 0.9rem;
            }

            .breadcrumb-item-premium {
                display: flex;
                align-items: center;
                gap: 0.25rem;
                color: #6c757d;
                cursor: pointer;
                padding: 0.25rem 0.5rem;
                border-radius: 6px;
                transition: all 0.2s ease;
            }

            .breadcrumb-item-premium:hover {
                background: rgba(46, 134, 171, 0.1);
                color: var(--primary-color);
            }

            .breadcrumb-item-premium.active {
                color: var(--primary-color);
                font-weight: 600;
            }

            .breadcrumb-separator {
                color: #cbd5e0;
                font-size: 0.7rem;
            }

            .patient-card-header-premium {
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                padding: 2rem;
                display: flex;
                justify-content: space-between;
                align-items: center;
                border-bottom: 1px solid #e2e8f0;
            }

            .patient-info-section-premium {
                display: flex;
                align-items: center;
                gap: 1.5rem;
            }

            .patient-avatar-premium-large {
                width: 80px;
                height: 80px;
                background: linear-gradient(135deg, var(--primary-color), #246185);
                border-radius: 16px;
                display: flex;
                align-items: center;
                justify-content: center;
                position: relative;
                box-shadow: 0 8px 24px rgba(46, 134, 171, 0.3);
            }

            .patient-initials-premium-large {
                color: white;
                font-size: 1.8rem;
                font-weight: 700;
            }

            .patient-status-indicator {
                position: absolute;
                bottom: -4px;
                right: -4px;
                width: 20px;
                height: 20px;
                border-radius: 50%;
                border: 3px solid white;
                box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            }

            .patient-status-indicator.active {
                background: #22c55e;
                animation: pulse-indicator 2s infinite;
            }

            .patient-status-indicator.inactive {
                background: #94a3b8;
            }

            @keyframes pulse-indicator {
                0% { transform: scale(1); opacity: 1; }
                50% { transform: scale(1.1); opacity: 0.8; }
                100% { transform: scale(1); opacity: 1; }
            }

            .patient-details-premium {
                flex: 1;
            }

            .patient-name-premium-main {
                font-size: 1.8rem;
                font-weight: 700;
                color: #1a202c;
                margin: 0 0 0.75rem 0;
                line-height: 1.2;
            }

            .patient-meta-premium {
                display: flex;
                gap: 1.5rem;
                flex-wrap: wrap;
            }

            .patient-meta-item {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                color: #6c757d;
                font-size: 0.95rem;
                font-weight: 500;
            }

            .patient-meta-item i {
                color: var(--primary-color);
                width: 16px;
            }

            .patient-actions-premium {
                display: flex;
                gap: 1rem;
                flex-direction: column;
            }

            .btn-premium {
                padding: 0.875rem 1.5rem;
                border: none;
                border-radius: 12px;
                font-weight: 600;
                font-size: 0.95rem;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 0.5rem;
                cursor: pointer;
                transition: all 0.3s ease;
                position: relative;
                overflow: hidden;
                min-width: 180px;
            }

            .btn-premium-primary {
                background: linear-gradient(135deg, var(--primary-color) 0%, #246185 100%);
                color: white;
                box-shadow: 0 4px 15px rgba(46, 134, 171, 0.3);
            }

            .btn-premium-warning {
                background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
                color: white;
                box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);
            }

            .btn-premium-info {
                background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
                color: white;
                box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
            }

            .btn-premium:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 25px rgba(0,0,0,0.2);
            }

            .btn-glow {
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
                transition: left 0.6s ease;
            }

            .btn-premium:hover .btn-glow {
                left: 100%;
            }

            .patient-consultations-section-premium {
                padding: 2rem;
            }

            .consultations-header-premium {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 1.5rem;
                padding-bottom: 1rem;
                border-bottom: 2px solid #e2e8f0;
            }

            .consultations-title {
                color: #1a202c;
                font-size: 1.3rem;
                font-weight: 700;
                margin: 0;
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }

            .consultations-title i {
                color: var(--primary-color);
            }

            .consultations-count-badge {
                background: linear-gradient(135deg, var(--primary-color), #246185);
                color: white;
                padding: 0.5rem 1rem;
                border-radius: 20px;
                font-size: 0.85rem;
                font-weight: 600;
                box-shadow: 0 2px 8px rgba(46, 134, 171, 0.3);
            }

            .consultations-list-premium {
                display: flex;
                flex-direction: column;
                gap: 1rem;
            }

            .consultation-item-premium {
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                border: 2px solid #e2e8f0;
                border-radius: 12px;
                overflow: hidden;
                transition: all 0.3s ease;
                box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            }

            .consultation-item-premium:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.1);
                border-color: var(--primary-color);
            }

            .consultation-item-premium.active-consultation-highlight {
                border-color: #f39c12;
                background: linear-gradient(135deg, #fff8e1 0%, #fffbf0 100%);
                box-shadow: 0 4px 20px rgba(243, 156, 18, 0.2);
                position: relative;
            }

            .consultation-item-premium.active-consultation-highlight::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: linear-gradient(90deg, #f39c12, #e67e22);
            }

            .consultation-status-badge-premium {
                display: inline-flex;
                align-items: center;
                gap: 0.5rem;
                padding: 0.5rem 1rem;
                border-radius: 0 0 12px 0;
                font-size: 0.8rem;
                font-weight: 600;
                position: relative;
            }

            .consultation-status-badge-premium.active {
                background: linear-gradient(135deg, #f39c12, #e67e22);
                color: white;
            }

            .consultation-status-badge-premium.completed {
                background: linear-gradient(135deg, #22c55e, #16a085);
                color: white;
            }

            .status-pulse {
                position: absolute;
                top: 50%;
                right: 8px;
                transform: translateY(-50%);
                width: 8px;
                height: 8px;
                background: white;
                border-radius: 50%;
                animation: pulse-status 1.5s infinite;
            }

            .consultation-content-premium {
                padding: 1.5rem;
            }

            .consultation-header-row-premium {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 1rem;
            }

            .consultation-date-time-premium {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                color: #6c757d;
                font-weight: 500;
            }

            .consultation-date-time-premium i {
                color: var(--primary-color);
            }

            .consultation-duration-premium {
                color: #f39c12;
                font-weight: 600;
                font-size: 0.9rem;
            }

            .type-badge-premium {
                padding: 0.25rem 0.75rem;
                border-radius: 12px;
                font-size: 0.75rem;
                font-weight: 600;
                color: white;
            }

            .type-badge-premium.active {
                background: linear-gradient(135deg, #f39c12, #e67e22);
            }

            .type-badge-premium.primary {
                background: linear-gradient(135deg, #3498db, #2980b9);
            }

            .type-badge-premium.secondary {
                background: linear-gradient(135deg, #9b59b6, #8e44ad);
            }

            .consultation-details-premium {
                display: flex;
                flex-direction: column;
                gap: 0.75rem;
                margin-bottom: 1.5rem;
            }

            .consultation-detail-item-premium {
                display: flex;
                align-items: flex-start;
                gap: 0.5rem;
                font-size: 0.9rem;
                line-height: 1.4;
            }

            .consultation-detail-item-premium i {
                color: var(--primary-color);
                width: 16px;
                margin-top: 0.1rem;
                flex-shrink: 0;
            }

            .consultation-detail-item-premium strong {
                color: #1a202c;
                margin-right: 0.5rem;
            }

            .status-text.active {
                color: #f39c12;
                font-weight: 600;
            }

            .consultation-actions-premium {
                display: flex;
                gap: 0.75rem;
                flex-wrap: wrap;
            }

            .btn-consultation-premium {
                padding: 0.5rem 1rem;
                border: none;
                border-radius: 8px;
                font-size: 0.85rem;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                gap: 0.25rem;
            }

            .btn-consultation-continue {
                background: linear-gradient(135deg, #f39c12, #e67e22);
                color: white;
            }

            .btn-consultation-complete {
                background: linear-gradient(135deg, #22c55e, #16a085);
                color: white;
            }

            .btn-consultation-cancel {
                background: linear-gradient(135deg, #e74c3c, #c0392b);
                color: white;
            }

            .btn-consultation-view {
                background: linear-gradient(135deg, #3498db, #2980b9);
                color: white;
            }

            .btn-consultation-copy {
                background: linear-gradient(135deg, #6c757d, #5a6268);
                color: white;
            }

            .btn-consultation-premium:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            }

            .no-consultations-premium {
                text-align: center;
                padding: 3rem 2rem;
                color: #6c757d;
            }

            .no-consultations-icon-premium {
                font-size: 3rem;
                color: #cbd5e0;
                margin-bottom: 1rem;
            }

            .no-consultations-text-premium h5 {
                color: #495057;
                font-weight: 600;
                margin-bottom: 0.5rem;
            }

            .no-consultations-text-premium p {
                margin-bottom: 0.5rem;
            }

            /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
            @media (max-width: 768px) {
                .patient-card-header-premium {
                    flex-direction: column;
                    gap: 1.5rem;
                    text-align: center;
                }

                .patient-actions-premium {
                    flex-direction: row;
                    width: 100%;
                }

                .btn-premium {
                    min-width: auto;
                    flex: 1;
                }

                .consultation-header-row-premium {
                    flex-direction: column;
                    gap: 0.5rem;
                    align-items: flex-start;
                }

                .consultation-actions-premium {
                    justify-content: center;
                }
            }
            </style>
        `;
    }

    // === –ü–û–õ–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø "–ú–û–ò –ü–ê–¶–ò–ï–ù–¢–´" ===

    // –ü–û–õ–ù–´–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã"
    async loadMyPatients() {
        try {
            console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã"...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            const cacheKey = `my_patients_${this.doctorId}`;
            const cachedData = this.cache.get(cacheKey);
            
            if (cachedData && (Date.now() - cachedData.timestamp < 300000)) { // 5 –º–∏–Ω—É—Ç –∫—ç—à
                this.myPatients = cachedData.data;
                console.log('üìÑ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞:', this.myPatients.length);
                return;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ IndexedDB –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if (typeof storageManager !== 'undefined' && storageManager && storageManager.isInitialized) {
                try {
                    const patients = await storageManager.getAllPatients();
                    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ –¥–æ–∫—Ç–æ—Ä–∞ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏
                    this.myPatients = patients.filter(patient => 
                        patient.consultations && 
                        patient.consultations.length > 0 &&
                        patient.consultations.some(c => c.doctorId === this.doctorId || !c.doctorId)
                    );
                } catch (error) {
                    console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ IndexedDB:', error);
                    this.myPatients = [];
                }
            } else {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage –∫–∞–∫ fallback
                const savedPatients = localStorage.getItem(`cardio_my_patients_${this.doctorId}`);
                this.myPatients = savedPatients ? JSON.parse(savedPatients) : [];
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            this.cache.set(cacheKey, {
                data: this.myPatients,
                timestamp: Date.now()
            });
            
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:', this.myPatients.length);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:', error);
            this.logError('Load My Patients Error', error);
            this.myPatients = [];
        }
    }

    // –ü–û–õ–ù–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    async updateMyPatientsList() {
        try {
            const listContainer = document.getElementById('myPatientsList');
            if (!listContainer) return;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            listContainer.innerHTML = `
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...</span>
                    </div>
                    <p class="mt-3">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤...</p>
                </div>
            `;
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
            let filteredPatients = [...this.myPatients];
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
            if (this.myPatientsSearchQuery.trim() !== '') {
                const query = this.myPatientsSearchQuery.toLowerCase().trim();
                filteredPatients = filteredPatients.filter(patient => {
                    const name = this.getPatientDisplayName(patient).toLowerCase();
                    const consultations = patient.consultations || [];
                    
                    return name.includes(query) || 
                           consultations.some(c => 
                               (c.complaints && c.complaints.toLowerCase().includes(query)) ||
                               (c.mainDiagnosis && c.mainDiagnosis.toLowerCase().includes(query)) ||
                               (c.date && c.date.includes(query))
                           );
                });
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–∏–ø–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä
            switch (this.myPatientsFilterType) {
                case 'starred':
                    filteredPatients = filteredPatients.filter(p => this.starredPatients.has(p.id));
                    break;
                case 'name':
                    filteredPatients.sort((a, b) => 
                        this.getPatientDisplayName(a).localeCompare(this.getPatientDisplayName(b))
                    );
                    break;
                case 'date':
                    filteredPatients.sort((a, b) => 
                        new Date(b.lastConsultationDate || 0) - new Date(a.lastConsultationDate || 0)
                    );
                    break;
                case 'diagnosis':
                    filteredPatients.sort((a, b) => {
                        const getDiagnosis = (p) => p.consultations?.[0]?.mainDiagnosis || '';
                        return getDiagnosis(a).localeCompare(getDiagnosis(b));
                    });
                    break;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.updateMyPatientsStats(filteredPatients);
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            if (filteredPatients.length === 0) {
                listContainer.innerHTML = this.getNoPatientFoundHTML();
            } else {
                const patientsHTML = filteredPatients.map(patient => 
                    this.getPatientCardHTML(patient)
                ).join('');
                
                listContainer.innerHTML = patientsHTML;
            }
            
            console.log('üìã –°–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω:', filteredPatients.length);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:', error);
            this.logError('Update Patients List Error', error);
            
            const listContainer = document.getElementById('myPatientsList');
            if (listContainer) {
                listContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle"></i>
                        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
                    </div>
                `;
            }
        }
    }

    // –ü–û–õ–ù–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateMyPatientsStats(filteredPatients = null) {
        try {
            const patients = filteredPatients || this.myPatients;
            const now = new Date();
            const today = now.toDateString();
            const thisMonth = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const totalCount = patients.length;
            const starredCount = patients.filter(p => this.starredPatients.has(p.id)).length;
            const todayCount = patients.filter(p => {
                const lastDate = p.lastConsultationDate ? new Date(p.lastConsultationDate).toDateString() : null;
                return lastDate === today;
            }).length;
            const thisMonthCount = patients.filter(p => {
                const lastDate = p.lastConsultationDate ? p.lastConsultationDate.substring(0, 7) : null;
                return lastDate === thisMonth;
            }).length;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            const updateElement = (id, value) => {
                const element = document.getElementById(id);
                if (element) element.textContent = value;
            };
            
            updateElement('totalPatientsCount', totalCount);
            updateElement('starredPatientsCount', starredCount);
            updateElement('todayCount', todayCount);
            updateElement('thisMonthCount', thisMonthCount);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            this.logError('Update Stats Error', error);
        }
    }

    // –ü–û–õ–ù–´–ô –ú–ï–¢–û–î: –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º
    searchMyPatients(query) {
        try {
            // –î–µ–±–∞—É–Ω—Å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —á–∞—Å—Ç—ã—Ö –ø–æ–∏—Å–∫–æ–≤
            const debounceKey = 'myPatientsSearch';
            if (this.debounceTimers.has(debounceKey)) {
                clearTimeout(this.debounceTimers.get(debounceKey));
            }
            
            this.debounceTimers.set(debounceKey, setTimeout(() => {
                this.myPatientsSearchQuery = query || '';
                this.updateMyPatientsList();
            }, 300));
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:', error);
            this.logError('Search Patients Error', error);
        }
    }

    // –ü–û–õ–ù–´–ô –ú–ï–¢–û–î: –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    clearMyPatientsSearch() {
        try {
            const searchInput = document.getElementById('myPatientsSearch');
            if (searchInput) {
                searchInput.value = '';
            }
            this.myPatientsSearchQuery = '';
            this.updateMyPatientsList();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞:', error);
            this.logError('Clear Search Error', error);
        }
    }

    // –ü–û–õ–ù–´–ô –ú–ï–¢–û–î: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    filterMyPatients(filterType) {
        try {
            this.myPatientsFilterType = filterType || 'all';
            this.updateMyPatientsList();
            console.log('üîç –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä:', filterType);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:', error);
            this.logError('Filter Patients Error', error);
        }
    }

    // –ü–û–õ–ù–´–ô –ú–ï–¢–û–î: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    togglePatientStar(patientId) {
        try {
            if (this.starredPatients.has(patientId)) {
                this.starredPatients.delete(patientId);
            } else {
                this.starredPatients.add(patientId);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            this.saveStarredPatients();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateMyPatientsList();
            
            const isStarred = this.starredPatients.has(patientId);
            this.showNotification(
                isStarred ? '–ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ' : '–ü–∞—Ü–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö', 
                'success', 
                2000
            );
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
            this.logError('Toggle Star Error', error);
        }
    }

    // –ü–û–õ–ù–´–ô –ú–ï–¢–û–î: –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã"
    openPatientFromMyPatients(patientId) {
        try {
            console.log('üë§ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã":', patientId);
            
            const patient = this.myPatients.find(p => p.id === patientId);
            if (!patient) {
                this.showErrorMessage('–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            this.currentPatient = patient;
            this.currentView = 'patient-card';
            this.previousView = 'list';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –ø–∞—Ü–∏–µ–Ω—Ç–∞
            this.showPatientCard(patient);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞:', error);
            this.logError('Open Patient Card Error', error);
            this.showErrorMessage('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞');
        }
    }

    // –ü–û–õ–ù–´–ô –ú–ï–¢–û–î: –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    backToPatientsList() {
        try {
            this.currentView = 'list';
            this.currentPatient = null;
            this.previousView = null;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            const listView = document.getElementById('myPatientsListView');
            const cardView = document.getElementById('myPatientsCardView');
            
            if (listView) listView.style.display = 'block';
            if (cardView) cardView.style.display = 'none';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            this.updateMyPatientsList();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É:', error);
            this.logError('Back To List Error', error);
        }
    }

    // –ü–û–õ–ù–´–ô –ú–ï–¢–û–î: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã"
    async onMyPatientsTabActivate() {
        try {
            console.log('üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã"');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            if (this.myPatients.length === 0) {
                await this.loadMyPatients();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await this.updateMyPatientsList();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∫–ª–∞–¥–∫–∏ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã":', error);
            this.logError('My Patients Tab Activate Error', error);
        }
    }

    // –ü–û–õ–ù–´–ô –ú–ï–¢–û–î: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    saveStarredPatients() {
        try {
            const starredArray = [...this.starredPatients];
            localStorage.setItem(`cardio_starred_patients_${this.doctorId}`, JSON.stringify(starredArray));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö:', error);
            this.logError('Save Starred Error', error);
        }
    }

    // –ü–û–õ–ù–´–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    loadStarredPatients() {
        try {
            const saved = localStorage.getItem(`cardio_starred_patients_${this.doctorId}`);
            if (saved) {
                const starredArray = JSON.parse(saved);
                this.starredPatients = new Set(starredArray);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö:', error);
            this.logError('Load Starred Error', error);
            this.starredPatients = new Set();
        }
    }

    // === –ü–†–ï–ú–ò–£–ú –ò–ù–¢–ï–†–§–ï–ô–° "–ú–û–ò –ü–ê–¶–ò–ï–ù–¢–´" ===

    // –ü–†–ï–ú–ò–£–ú: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∫–ª–∞–¥–∫–∏ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã" —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º
    getMyPatientsInterface() {
        return `
            <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ -->
            <div id="myPatientsListView" style="display: block;">
                <div class="my-patients-container-premium">
                    <!-- –ü–†–ï–ú–ò–£–ú: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º -->
                    <div class="my-patients-header-premium">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <div class="header-title-section">
                                    <div class="header-icon-premium">
                                        <i class="fas fa-users"></i>
                                    </div>
                                    <div class="header-text-premium">
                                        <h3 class="header-title-premium">–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã</h3>
                                        <p class="header-subtitle-premium">–í—Å–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–ª–∏</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="my-patients-stats-premium">
                                    <div class="stat-item-premium">
                                        <div class="stat-value-premium" id="totalPatientsCount">0</div>
                                        <div class="stat-label-premium">–í—Å–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤</div>
                                    </div>
                                    <div class="stat-item-premium starred-stat">
                                        <div class="stat-value-premium" id="starredPatientsCount">0</div>
                                        <div class="stat-label-premium">
                                            <i class="fas fa-star text-warning"></i> –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö
                                        </div>
                                    </div>
                                    <div class="stat-item-premium">
                                        <div class="stat-value-premium" id="thisMonthCount">0</div>
                                        <div class="stat-label-premium">–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ</div>
                                    </div>
                                    <div class="stat-item-premium">
                                        <div class="stat-value-premium" id="todayCount">0</div>
                                        <div class="stat-label-premium">–°–µ–≥–æ–¥–Ω—è</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- –ü–†–ï–ú–ò–£–ú: –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ -->
                    <div class="my-patients-search-panel-premium">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="search-group-premium">
                                    <div class="search-input-wrapper">
                                        <div class="search-icon">
                                            <i class="fas fa-search"></i>
                                        </div>
                                        <input type="text" 
                                               class="form-control search-input-premium" 
                                               id="myPatientsSearch"
                                               placeholder="–ü–æ–∏—Å–∫ –ø–æ –§–ò–û, –¥–∞—Ç–µ, –¥–∏–∞–≥–Ω–æ–∑—É, –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º..."
                                               onkeyup="app.searchMyPatients(this.value)">
                                        <button class="search-clear-btn" 
                                                type="button"
                                                onclick="app.clearMyPatientsSearch()">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                    <small class="search-hint">
                                        <i class="fas fa-lightbulb"></i>
                                        –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∏–º—è, –¥–∞—Ç—É (–¥–¥.–º–º.–≥–≥–≥–≥) –∏–ª–∏ –¥–∏–∞–≥–Ω–æ–∑
                                    </small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="filter-group-premium">
                                    <label class="filter-label">
                                        <i class="fas fa-filter"></i>
                                        –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É:
                                    </label>
                                    <select class="form-select filter-select-premium" 
                                            id="myPatientsFilter"
                                            onchange="app.filterMyPatients(this.value)">
                                        <option value="all">–í—Å–µ –∑–∞–ø–∏—Å–∏</option>
                                        <option value="starred">‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã</option>
                                        <option value="name">–ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (–ê-–Ø)</option>
                                        <option value="date">–ü–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)</option>
                                        <option value="diagnosis">–ü–æ –¥–∏–∞–≥–Ω–æ–∑—É</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- –ü–†–ï–ú–ò–£–ú: –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π -->
                        <div class="action-panel-premium mt-3">
                            <button class="btn-action-premium btn-action-primary" onclick="app.exportAllPatientsData()">
                                <i class="fas fa-download"></i>
                                <span>–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö</span>
                            </button>
                            <button class="btn-action-premium btn-action-secondary" onclick="app.importPatientsData()">
                                <i class="fas fa-upload"></i>
                                <span>–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</span>
                            </button>
                            <button class="btn-action-premium btn-action-info" onclick="app.showStorageStats()">
                                <i class="fas fa-chart-pie"></i>
                                <span>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞</span>
                            </button>
                        </div>
                    </div>

                    <!-- –ü–†–ï–ú–ò–£–ú: –°–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ -->
                    <div class="my-patients-list-premium" id="myPatientsList">
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                            </div>
                            <p class="mt-3">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤...</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
            <div id="myPatientsCardView" style="display: none;">
                <!-- –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞—Ä—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ -->
            </div>

            <style>
            /* –ü–†–ï–ú–ò–£–ú: –°—Ç–∏–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã" —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º */
            .my-patients-container-premium {
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                min-height: 600px;
            }

            .my-patients-header-premium {
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                padding: 2rem;
                border-radius: 16px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.08);
                margin-bottom: 2rem;
                border: 1px solid #e2e8f0;
                border-left: 4px solid var(--primary-color);
            }

            .header-title-section {
                display: flex;
                align-items: center;
                gap: 1rem;
            }

            .header-icon-premium {
                width: 60px;
                height: 60px;
                background: linear-gradient(135deg, var(--primary-color), #246185);
                border-radius: 16px;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-size: 1.5rem;
                box-shadow: 0 8px 24px rgba(46, 134, 171, 0.3);
            }

            .header-text-premium {
                flex: 1;
            }

            .header-title-premium {
                color: #1a202c;
                font-size: 1.8rem;
                font-weight: 700;
                margin: 0;
                line-height: 1.2;
            }

            .header-subtitle-premium {
                color: #6c757d;
                font-size: 1rem;
                margin: 0.5rem 0 0 0;
                font-weight: 500;
            }

            .my-patients-stats-premium {
                display: flex;
                gap: 1.5rem;
                justify-content: flex-end;
                flex-wrap: wrap;
            }

            .stat-item-premium {
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                border: 2px solid #e2e8f0;
                border-radius: 12px;
                padding: 1rem 1.25rem;
                text-align: center;
                min-width: 100px;
                transition: all 0.3s ease;
                box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            }

            .stat-item-premium:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.1);
                border-color: var(--primary-color);
            }

            .stat-item-premium.starred-stat {
                border-color: #ffc107;
                background: linear-gradient(135deg, #fff8e1 0%, #fffbf0 100%);
            }

            .stat-value-premium {
                font-size: 1.8rem;
                font-weight: 800;
                color: var(--primary-color);
                margin-bottom: 0.25rem;
                line-height: 1;
            }

            .stat-item-premium.starred-stat .stat-value-premium {
                color: #f59e0b;
            }

            .stat-label-premium {
                font-size: 0.8rem;
                color: #6c757d;
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 0.25rem;
            }

            .my-patients-search-panel-premium {
                background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
                padding: 2rem;
                border-radius: 16px;
                margin-bottom: 2rem;
                border: 1px solid #e2e8f0;
                box-shadow: 0 2px 12px rgba(0,0,0,0.05);
            }

            .search-group-premium {
                position: relative;
            }

            .search-input-wrapper {
                position: relative;
                display: flex;
                align-items: center;
            }

            .search-icon {
                position: absolute;
                left: 16px;
                z-index: 3;
                color: var(--primary-color);
                font-size: 1.1rem;
            }

            .search-input-premium {
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                border: 2px solid #e2e8f0;
                border-radius: 12px;
                padding: 14px 50px 14px 50px;
                font-size: 1rem;
                font-weight: 500;
                color: #1a202c;
                transition: all 0.3s ease;
                box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            }

            .search-input-premium:focus {
                border-color: var(--primary-color);
                box-shadow: 0 0 0 3px rgba(46, 134, 171, 0.15);
                outline: none;
                transform: translateY(-1px);
                background: #ffffff;
            }

            .search-clear-btn {
                position: absolute;
                right: 12px;
                z-index: 3;
                background: rgba(108, 117, 125, 0.1);
                border: none;
                border-radius: 8px;
                width: 32px;
                height: 32px;
                color: #6c757d;
                cursor: pointer;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .search-clear-btn:hover {
                background: rgba(220, 53, 69, 0.1);
                color: #dc3545;
                transform: scale(1.1);
            }

            .search-hint {
                color: #6c757d;
                font-size: 0.85rem;
                margin-top: 0.5rem;
                display: flex;
                align-items: center;
                gap: 0.5rem;
                font-weight: 500;
            }

            .search-hint i {
                color: #f59e0b;
            }

            .filter-group-premium {
                height: 100%;
                display: flex;
                flex-direction: column;
            }

            .filter-label {
                font-weight: 600;
                color: #1a202c;
                margin-bottom: 0.75rem;
                font-size: 0.95rem;
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }

            .filter-label i {
                color: var(--primary-color);
            }

            .filter-select-premium {
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                border: 2px solid #e2e8f0;
                border-radius: 12px;
                padding: 14px 16px;
                font-size: 0.95rem;
                font-weight: 500;
                color: #1a202c;
                transition: all 0.3s ease;
                box-shadow: 0 2px 8px rgba(0,0,0,0.05);
                flex: 1;
            }

            .filter-select-premium:focus {
                border-color: var(--primary-color);
                box-shadow: 0 0 0 3px rgba(46, 134, 171, 0.15);
                outline: none;
                background: #ffffff;
            }

            .action-panel-premium {
                display: flex;
                gap: 1rem;
                flex-wrap: wrap;
                padding-top: 1.5rem;
                border-top: 1px solid #e2e8f0;
            }

            .btn-action-premium {
                padding: 0.75rem 1.5rem;
                border: none;
                border-radius: 10px;
                font-weight: 600;
                font-size: 0.9rem;
                cursor: pointer;
                transition: all 0.3s ease;
                display: flex;
                align-items: center;
                gap: 0.5rem;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                position: relative;
                overflow: hidden;
            }

            .btn-action-premium:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(0,0,0,0.15);
            }

            .btn-action-primary {
                background: linear-gradient(135deg, var(--primary-color), #246185);
                color: white;
            }

            .btn-action-secondary {
                background: linear-gradient(135deg, #6c757d, #5a6268);
                color: white;
            }

            .btn-action-info {
                background: linear-gradient(135deg, #3498db, #2980b9);
                color: white;
            }

            .my-patients-list-premium {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
                gap: 1.5rem;
                padding: 1rem;
            }

            /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
            @media (max-width: 1200px) {
                .my-patients-stats-premium {
                    justify-content: center;
                    margin-top: 1rem;
                }
            }

            @media (max-width: 768px) {
                .my-patients-header-premium {
                    padding: 1.5rem;
                }

                .header-title-section {
                    flex-direction: column;
                    text-align: center;
                    gap: 1rem;
                }

                .my-patients-stats-premium {
                    gap: 1rem;
                }

                .stat-item-premium {
                    min-width: 80px;
                    padding: 0.75rem 1rem;
                }

                .my-patients-search-panel-premium {
                    padding: 1.5rem;
                }

                .action-panel-premium {
                    justify-content: center;
                }

                .my-patients-list-premium {
                    grid-template-columns: 1fr;
                    gap: 1rem;
                }
            }
            </style>
        `;
    }

    // –ü–†–ï–ú–ò–£–ú: HTML –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º
    getPatientCardHTML(patient) {
        const isStarred = this.starredPatients.has(patient.id);
        const lastConsultation = patient.consultations?.[0] || {};
        const consultationsCount = patient.totalConsultations || patient.consultations?.length || 0;
        
        return `
            <div class="patient-card-premium ${isStarred ? 'starred' : ''}" onclick="app.openPatientFromMyPatients('${patient.id}')">
                <div class="patient-card-star-premium ${isStarred ? 'active' : ''}" 
                     onclick="event.stopPropagation(); app.togglePatientStar('${patient.id}')">
                    <i class="fas fa-star"></i>
                </div>
                
                <div class="patient-card-header-premium-card">
                    <div class="patient-avatar-premium-card">
                        <span class="patient-initials-premium-card">${this.getPatientInitials(patient)}</span>
                    </div>
                    <div class="patient-info-premium-card">
                        <div class="patient-name-premium-card">${this.getPatientDisplayName(patient)}</div>
                        <div class="patient-details-premium-card">
                            ${this.getPatientAge(patient)} –ª–µ—Ç, ${this.getPatientGender(patient)}
                        </div>
                    </div>
                    <div class="consultation-date-premium-card">
                        ${this.formatDate(patient.lastConsultationDate)}
                    </div>
                </div>
                
                <div class="patient-card-body-premium">
                    <div class="patient-card-item-premium">
                        <div class="item-icon-premium">
                            <i class="fas fa-clipboard-list"></i>
                        </div>
                        <div class="item-content-premium">
                            <div class="item-label-premium">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π</div>
                            <div class="item-value-premium">${consultationsCount}</div>
                        </div>
                    </div>
                    
                    <div class="patient-card-item-premium">
                        <div class="item-icon-premium">
                            <i class="fas fa-diagnoses"></i>
                        </div>
                        <div class="item-content-premium">
                            <div class="item-label-premium">–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–≥–Ω–æ–∑</div>
                            <div class="item-value-premium">${lastConsultation.mainDiagnosis || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                        </div>
                    </div>
                    
                    <div class="patient-card-item-premium">
                        <div class="item-icon-premium">
                            <i class="fas fa-phone"></i>
                        </div>
                        <div class="item-content-premium">
                            <div class="item-label-premium">–¢–µ–ª–µ—Ñ–æ–Ω</div>
                            <div class="item-value-premium">${patient.phone || patient.personalInfo?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                        </div>
                    </div>
                    
                    <div class="patient-card-item-premium">
                        <div class="item-icon-premium">
                            <i class="fas fa-birthday-cake"></i>
                        </div>
                        <div class="item-content-premium">
                            <div class="item-label-premium">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</div>
                            <div class="item-value-premium">${this.formatDate(patient.birthDate || patient.personalInfo?.birthDate)}</div>
                        </div>
                    </div>
                </div>
                
                <div class="patient-card-actions-premium">
                    <button class="btn-card-action-premium btn-card-consultation" onclick="event.stopPropagation(); app.createActiveConsultation(app.myPatients.find(p => p.id === '${patient.id}'))">
                        <i class="fas fa-user-md"></i>
                        <span>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</span>
                    </button>
                    <button class="btn-card-action-premium btn-card-history" onclick="event.stopPropagation(); app.viewPatientHistory('${patient.id}')">
                        <i class="fas fa-history"></i>
                        <span>–ò—Å—Ç–æ—Ä–∏—è</span>
                    </button>
                    <button class="btn-card-action-premium btn-card-view" onclick="event.stopPropagation(); app.openPatientFromMyPatients('${patient.id}')">
                        <i class="fas fa-eye"></i>
                        <span>–ö–∞—Ä—Ç–∞</span>
                    </button>
                </div>
            </div>

            <style>
            /* –ü–†–ï–ú–ò–£–ú: –°—Ç–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ */
            .patient-card-premium {
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                border: 2px solid #e2e8f0;
                border-radius: 16px;
                padding: 1.5rem;
                cursor: pointer;
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                position: relative;
                overflow: hidden;
                box-shadow: 0 4px 12px rgba(0,0,0,0.05);
                border-left: 4px solid var(--primary-color);
            }

            .patient-card-premium:hover {
                transform: translateY(-4px);
                box-shadow: 0 12px 32px rgba(0,0,0,0.12);
                border-color: var(--primary-color);
                border-left-width: 6px;
            }

            .patient-card-premium.starred {
                border-left-color: #f59e0b;
                background: linear-gradient(135deg, #fff8e1 0%, #fffbf0 100%);
            }

            .patient-card-premium::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 2px;
                background: linear-gradient(90deg, var(--primary-color), transparent);
                opacity: 0;
                transition: opacity 0.3s ease;
            }

            .patient-card-premium:hover::before {
                opacity: 1;
            }

            .patient-card-star-premium {
                position: absolute;
                top: 12px;
                right: 12px;
                width: 36px;
                height: 36px;
                background: rgba(255,255,255,0.9);
                border: 2px solid #e2e8f0;
                border-radius: 10px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                transition: all 0.3s ease;
                backdrop-filter: blur(10px);
                z-index: 2;
            }

            .patient-card-star-premium:hover {
                background: rgba(245, 158, 11, 0.1);
                border-color: #f59e0b;
                transform: scale(1.1);
            }

            .patient-card-star-premium.active {
                background: linear-gradient(135deg, #f59e0b, #d97706);
                border-color: #f59e0b;
                color: white;
                box-shadow: 0 4px 12px rgba(245, 158, 11, 0.3);
            }

            .patient-card-star-premium i {
                font-size: 0.9rem;
                color: #6c757d;
                transition: all 0.3s ease;
            }

            .patient-card-star-premium.active i {
                color: white;
                transform: scale(1.1);
            }

            .patient-card-header-premium-card {
                display: flex;
                align-items: center;
                gap: 1rem;
                margin-bottom: 1.5rem;
                padding-right: 3rem;
            }

            .patient-avatar-premium-card {
                width: 56px;
                height: 56px;
                background: linear-gradient(135deg, var(--primary-color), #246185);
                border-radius: 14px;
                display: flex;
                align-items: center;
                justify-content: center;
                flex-shrink: 0;
                box-shadow: 0 6px 18px rgba(46, 134, 171, 0.3);
            }

            .patient-initials-premium-card {
                color: white;
                font-size: 1.1rem;
                font-weight: 700;
            }

            .patient-info-premium-card {
                flex: 1;
                min-width: 0;
            }

            .patient-name-premium-card {
                font-size: 1.1rem;
                font-weight: 700;
                color: #1a202c;
                margin-bottom: 0.25rem;
                line-height: 1.2;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }

            .patient-details-premium-card {
                font-size: 0.85rem;
                color: #6c757d;
                font-weight: 500;
            }

            .consultation-date-premium-card {
                font-size: 0.8rem;
                color: var(--primary-color);
                font-weight: 600;
                background: rgba(46, 134, 171, 0.1);
                padding: 0.25rem 0.5rem;
                border-radius: 6px;
            }

            .patient-card-body-premium {
                display: flex;
                flex-direction: column;
                gap: 1rem;
                margin-bottom: 1.5rem;
            }

            .patient-card-item-premium {
                display: flex;
                align-items: center;
                gap: 0.75rem;
                padding: 0.75rem;
                background: rgba(248, 250, 252, 0.8);
                border-radius: 10px;
                transition: all 0.2s ease;
            }

            .patient-card-item-premium:hover {
                background: rgba(46, 134, 171, 0.05);
            }

            .item-icon-premium {
                width: 36px;
                height: 36px;
                background: linear-gradient(135deg, var(--primary-color), #246185);
                border-radius: 8px;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-size: 0.9rem;
                flex-shrink: 0;
            }

            .item-content-premium {
                flex: 1;
                min-width: 0;
            }

            .item-label-premium {
                font-size: 0.75rem;
                color: #6c757d;
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                margin-bottom: 0.25rem;
            }

            .item-value-premium {
                font-size: 0.9rem;
                color: #1a202c;
                font-weight: 600;
                line-height: 1.2;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }

            .patient-card-actions-premium {
                display: flex;
                gap: 0.5rem;
            }

            .btn-card-action-premium {
                flex: 1;
                padding: 0.75rem 0.5rem;
                border: none;
                border-radius: 10px;
                font-weight: 600;
                font-size: 0.8rem;
                cursor: pointer;
                transition: all 0.3s ease;
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 0.25rem;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            }

            .btn-card-action-premium:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            }

            .btn-card-consultation {
                background: linear-gradient(135deg, var(--primary-color), #246185);
                color: white;
            }

            .btn-card-history {
                background: linear-gradient(135deg, #22c55e, #16a085);
                color: white;
            }

            .btn-card-view {
                background: linear-gradient(135deg, #3498db, #2980b9);
                color: white;
            }

            .btn-card-action-premium i {
                font-size: 1rem;
            }

            .btn-card-action-premium span {
                font-size: 0.75rem;
            }

            @media (max-width: 768px) {
                .patient-card-premium {
                    padding: 1rem;
                }

                .patient-card-header-premium-card {
                    padding-right: 2.5rem;
                }

                .patient-avatar-premium-card {
                    width: 48px;
                    height: 48px;
                }

                .btn-card-action-premium {
                    padding: 0.5rem 0.25rem;
                }

                .btn-card-action-premium span {
                    font-size: 0.7rem;
                }
            }
            </style>
        `;
    }

    // HTML –∫–æ–≥–¥–∞ –ø–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    getNoPatientFoundHTML() {
        return `
            <div class="no-patients-found-premium">
                <div class="no-patients-icon-premium">
                    <i class="fas fa-user-friends"></i>
                </div>
                <div class="no-patients-content-premium">
                    <h5 class="no-patients-title">–ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h5>
                    <p class="no-patients-text">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.</p>
                    <button class="btn-no-patients-action" onclick="app.switchToTab('schedule')">
                        <i class="fas fa-calendar-alt"></i>
                        <span>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é</span>
                    </button>
                </div>
            </div>

            <style>
            .no-patients-found-premium {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                padding: 4rem 2rem;
                text-align: center;
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                border-radius: 16px;
                border: 2px dashed #cbd5e0;
                margin: 2rem 0;
            }

            .no-patients-icon-premium {
                font-size: 4rem;
                color: #cbd5e0;
                margin-bottom: 1.5rem;
            }

            .no-patients-content-premium {
                max-width: 400px;
            }

            .no-patients-title {
                color: #1a202c;
                font-weight: 700;
                font-size: 1.3rem;
                margin-bottom: 1rem;
            }

            .no-patients-text {
                color: #6c757d;
                font-size: 1rem;
                margin-bottom: 2rem;
                line-height: 1.5;
            }

            .btn-no-patients-action {
                background: linear-gradient(135deg, var(--primary-color), #246185);
                color: white;
                border: none;
                padding: 1rem 2rem;
                border-radius: 12px;
                font-weight: 600;
                font-size: 1rem;
                cursor: pointer;
                transition: all 0.3s ease;
                display: flex;
                align-items: center;
                gap: 0.5rem;
                box-shadow: 0 4px 15px rgba(46, 134, 171, 0.3);
            }

            .btn-no-patients-action:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 25px rgba(46, 134, 171, 0.4);
            }
            </style>
        `;
    }

    // === –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–û–ì–ò–ö–ê –û–¢–ö–†–´–¢–ò–Ø –ü–ê–¶–ò–ï–ù–¢–û–í ===

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–∞—Ü–∏–µ–Ω—Ç–∞
    async openPatientFromSchedule(patientId, appointmentId = null) {
        try {
            console.log(`üîì –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ${patientId}, –∑–∞–ø–∏—Å—å: ${appointmentId}`);
            
            this.showLoading();
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            let patient = await this.getPatientData(patientId);
            
            if (!patient) {
                this.showErrorMessage('–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                console.error(`‚ùå –ü–∞—Ü–∏–µ–Ω—Ç —Å ID ${patientId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return;
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            this.createActiveConsultation(patient, appointmentId);

            console.log('üìã –°–æ–∑–¥–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', patient);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞:', error);
            this.logError('Open Patient From Schedule Error', error);
            this.showErrorMessage('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞');
        } finally {
            this.hideLoading();
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    async getPatientData(patientId) {
        try {
            let patient = null;
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ IndexedDB
            if (typeof storageManager !== 'undefined' && storageManager && storageManager.isInitialized) {
                patient = await storageManager.getPatient(patientId);
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ IndexedDB, –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
            if (!patient && typeof patientsManager !== 'undefined' && patientsManager) {
                patient = patientsManager.getPatient(patientId);
            }
            
            if (!patient && typeof testData !== 'undefined' && testData) {
                patient = testData.getPatientById(patientId);
            }

            // –ï—Å–ª–∏ —ç—Ç–æ –¥–µ–º–æ-–ø–∞—Ü–∏–µ–Ω—Ç –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if (!patient && typeof scheduleGridManager !== 'undefined' && scheduleGridManager) {
                patient = scheduleGridManager.getPatientById(patientId);
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –¥–µ–º–æ-–ø–∞—Ü–∏–µ–Ω—Ç, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            if (!patient && patientId.startsWith('demo_patient_')) {
                if (typeof scheduleGridManager !== 'undefined' && scheduleGridManager.appointments) {
                    const appointment = scheduleGridManager.appointments.find(app => app.patientId === patientId);
                    if (appointment) {
                        patient = {
                            id: patientId,
                            personalInfo: {
                                lastName: appointment.patientName.split(' ')[0] || '',
                                firstName: appointment.patientName.split(' ')[1] || '',
                                middleName: appointment.patientName.split(' ')[2] || ''
                            },
                            name: appointment.patientName,
                            birthDate: '1970-01-01',
                            gender: '–ú',
                            phone: '+7 (999) 000-00-00',
                            email: 'demo@example.com',
                            consultations: []
                        };
                    }
                }
            }
            
            return patient;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞:', error);
            this.logError('Get Patient Data Error', error);
            return null;
        }
    }

    // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ô ===

    // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–µ)
    continueActiveConsultation(patientId) {
        try {
            const consultation = this.activeConsultations.get(patientId);
            if (!consultation) {
                this.showErrorMessage('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            this.showActiveConsultationForm(consultation);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
            this.logError('Continue Consultation Error', error);
        }
    }

    // –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    showActiveConsultationForm(consultation) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞
            const patientCardContainer = document.querySelector('.patient-card-container');
            if (!patientCardContainer) return;

            // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            patientCardContainer.innerHTML = this.getActiveConsultationFormHTML(consultation);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            if (typeof consultationsManager !== 'undefined' && consultationsManager.createNewConsultation) {
                consultationsManager.createNewConsultation(consultation.patient);
            }

            console.log('üìã –ü–æ–∫–∞–∑–∞–Ω–∞ —Ñ–æ—Ä–º–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
            this.logError('Show Consultation Form Error', error);
        }
    }

    // HTML —Ñ–æ—Ä–º—ã –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    getActiveConsultationFormHTML(consultation) {
        const patient = consultation.patient;
        
        return `
            <div class="consultation-form-wrapper-premium">
                <!-- –ü–†–ï–ú–ò–£–ú: –ù–∞–≤–∏–≥–∞—Ü–∏—è -->
                <div class="consultation-form-navigation-premium">
                    <button class="btn-nav-premium" onclick="app.backToPatientCard('${patient.id}')">
                        <i class="fas fa-arrow-left"></i>
                        <span>–ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–µ</span>
                    </button>
                    <div class="consultation-form-breadcrumb-premium">
                        <span class="breadcrumb-item-premium" onclick="app.backToSchedule()">
                            <i class="fas fa-calendar-alt"></i>
                            –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                        </span>
                        <i class="fas fa-chevron-right breadcrumb-separator"></i>
                        <span class="breadcrumb-item-premium" onclick="app.backToPatientCard('${patient.id}')">
                            <i class="fas fa-user"></i>
                            –ö–∞—Ä—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
                        </span>
                        <i class="fas fa-chevron-right breadcrumb-separator"></i>
                        <span class="breadcrumb-item-premium active">
                            <i class="fas fa-edit"></i>
                            –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
                        </span>
                    </div>
                </div>

                <!-- –ü–†–ï–ú–ò–£–ú: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ -->
                <div class="consultation-patient-header-premium">
                    <div class="patient-info-section-consultation">
                        <div class="patient-avatar-consultation">
                            <span class="patient-initials-consultation">${this.getPatientInitials(patient)}</span>
                        </div>
                        <div class="patient-details-consultation">
                            <h3 class="patient-name-consultation">${this.getPatientDisplayName(patient)}</h3>
                            <div class="patient-meta-consultation">
                                <span class="patient-age-consultation">
                                    <i class="fas fa-birthday-cake"></i>
                                    ${this.getPatientAge(patient)} –ª–µ—Ç
                                </span>
                                <span class="patient-gender-consultation">
                                    <i class="fas fa-venus-mars"></i>
                                    ${this.getPatientGender(patient)}
                                </span>
                                <span class="consultation-duration-consultation">
                                    <i class="fas fa-clock"></i>
                                    ${this.getTimeElapsed(consultation.startTime)}
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="consultation-controls-premium">
                        <button class="btn-consultation-control btn-consultation-card" onclick="app.backToPatientCard('${patient.id}')" title="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–µ">
                            <i class="fas fa-user"></i>
                            <span>–ö –∫–∞—Ä—Ç–µ</span>
                        </button>
                        <button class="btn-consultation-control btn-consultation-complete" onclick="app.saveAndCompleteConsultation('${patient.id}')" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å">
                            <i class="fas fa-check"></i>
                            <span>–ó–∞–≤–µ—Ä—à–∏—Ç—å</span>
                        </button>
                        <button class="btn-consultation-control btn-consultation-cancel" onclick="app.promptCloseConsultation('${patient.id}')" title="–û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é">
                            <i class="fas fa-times"></i>
                            <span>–û—Ç–º–µ–Ω–∏—Ç—å</span>
                        </button>
                    </div>
                </div>

                <!-- –ü–†–ï–ú–ò–£–ú: –§–æ—Ä–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ -->
                <div class="consultation-form-container-premium">
                    ${consultationsManager ? consultationsManager.getConsultationForm() : '<div class="alert alert-warning">–§–æ—Ä–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</div>'}
                </div>

                <!-- –ü–†–ï–ú–ò–£–ú: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è -->
                <div class="consultation-form-actions-premium">
                    <button type="button" class="btn-form-action btn-form-save" onclick="app.saveConsultationDraft('${patient.id}')">
                        <i class="fas fa-save"></i>
                        <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫</span>
                    </button>
                    <button type="button" class="btn-form-action btn-form-preview" onclick="app.previewConsultation('${patient.id}')">
                        <i class="fas fa-eye"></i>
                        <span>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</span>
                    </button>
                </div>
            </div>

            <style>
            /* –ü–†–ï–ú–ò–£–ú: –°—Ç–∏–ª–∏ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ */
            .consultation-form-wrapper-premium {
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                border-radius: 16px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.08);
                overflow: hidden;
                border: 1px solid #e2e8f0;
            }

            .consultation-form-navigation-premium {
                background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
                padding: 1rem 2rem;
                border-bottom: 1px solid #e2e8f0;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .consultation-form-breadcrumb-premium {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                font-size: 0.9rem;
            }

            .consultation-patient-header-premium {
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                padding: 2rem;
                display: flex;
                justify-content: space-between;
                align-items: center;
                border-bottom: 1px solid #e2e8f0;
            }

            .patient-info-section-consultation {
                display: flex;
                align-items: center;
                gap: 1.5rem;
            }

            .patient-avatar-consultation {
                width: 72px;
                height: 72px;
                background: linear-gradient(135deg, var(--primary-color), #246185);
                border-radius: 16px;
                display: flex;
                align-items: center;
                justify-content: center;
                box-shadow: 0 8px 24px rgba(46, 134, 171, 0.3);
            }

            .patient-initials-consultation {
                color: white;
                font-size: 1.6rem;
                font-weight: 700;
            }

            .patient-details-consultation {
                flex: 1;
            }

            .patient-name-consultation {
                font-size: 1.6rem;
                font-weight: 700;
                color: #1a202c;
                margin: 0 0 0.75rem 0;
                line-height: 1.2;
            }

            .patient-meta-consultation {
                display: flex;
                gap: 1.5rem;
                flex-wrap: wrap;
            }

            .patient-age-consultation,
            .patient-gender-consultation,
            .consultation-duration-consultation {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                color: #6c757d;
                font-size: 0.95rem;
                font-weight: 500;
                background: rgba(248, 250, 252, 0.8);
                padding: 0.25rem 0.75rem;
                border-radius: 12px;
            }

            .consultation-duration-consultation {
                color: #f39c12;
                background: rgba(243, 156, 18, 0.1);
                font-weight: 600;
            }

            .patient-age-consultation i,
            .patient-gender-consultation i,
            .consultation-duration-consultation i {
                color: var(--primary-color);
            }

            .consultation-controls-premium {
                display: flex;
                gap: 0.75rem;
            }

            .btn-consultation-control {
                padding: 0.75rem 1.25rem;
                border: none;
                border-radius: 10px;
                font-weight: 600;
                font-size: 0.9rem;
                cursor: pointer;
                transition: all 0.3s ease;
                display: flex;
                align-items: center;
                gap: 0.5rem;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            }

            .btn-consultation-control:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            }

            .btn-consultation-card {
                background: linear-gradient(135deg, #6c757d, #5a6268);
                color: white;
            }

            .btn-consultation-complete {
                background: linear-gradient(135deg, #22c55e, #16a085);
                color: white;
            }

            .btn-consultation-cancel {
                background: linear-gradient(135deg, #e74c3c, #c0392b);
                color: white;
            }

            .consultation-form-container-premium {
                padding: 2rem;
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
                min-height: 600px;
            }

            .consultation-form-actions-premium {
                background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
                padding: 1.5rem 2rem;
                border-top: 1px solid #e2e8f0;
                display: flex;
                gap: 1rem;
                justify-content: center;
            }

            .btn-form-action {
                padding: 0.875rem 1.5rem;
                border: none;
                border-radius: 10px;
                font-weight: 600;
                font-size: 0.9rem;
                cursor: pointer;
                transition: all 0.3s ease;
                display: flex;
                align-items: center;
                gap: 0.5rem;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            }

            .btn-form-action:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            }

            .btn-form-save {
                background: linear-gradient(135deg, var(--primary-color), #246185);
                color: white;
            }

            .btn-form-preview {
                background: linear-gradient(135deg, #3498db, #2980b9);
                color: white;
            }

            @media (max-width: 768px) {
                .consultation-patient-header-premium {
                    flex-direction: column;
                    gap: 1.5rem;
                    text-align: center;
                }

                .consultation-controls-premium {
                    width: 100%;
                    justify-content: center;
                }

                .btn-consultation-control {
                    min-width: 120px;
                }

                .consultation-form-actions-premium {
                    flex-direction: column;
                    align-items: center;
                }
            }
            </style>
        `;
    }

    // –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ä—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    backToPatientCard(patientId) {
        try {
            const patient = this.findPatientById(patientId) || this.currentPatient;
            if (!patient) {
                this.showErrorMessage('–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            this.showPatientCardWithActiveConsultation(patient);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ä—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', error);
            this.logError('Back To Patient Card Error', error);
        }
    }

    // –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    backToSchedule() {
        try {
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            const scheduleContent = document.getElementById('scheduleContent');
            if (!scheduleContent) return;

            const patientCardContainer = scheduleContent.querySelector('.patient-card-container');
            const scheduleGrid = scheduleContent.querySelector('.schedule-grid-container');

            if (patientCardContainer) {
                patientCardContainer.style.display = 'none';
            }

            if (scheduleGrid) {
                scheduleGrid.style.display = 'block';
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            this.currentPatient = null;
            this.currentView = 'list';

            console.log('üìÖ –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:', error);
            this.logError('Back To Schedule Error', error);
        }
    }

    // === –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø–ú–ò ===

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    async completeActiveConsultation(patientId) {
        try {
            const consultation = this.activeConsultations.get(patientId);
            if (!consultation) {
                this.showErrorMessage('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            const hasData = consultation.data && Object.keys(consultation.data).length > 0;
            
            if (!hasData) {
                const confirmComplete = confirm(
                    '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?'
                );
                
                if (!confirmComplete) {
                    return;
                }
            }

            this.showLoading();

            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            if (hasData && typeof consultationsManager !== 'undefined' && consultationsManager.saveConsultation) {
                const success = await consultationsManager.saveConsultation();
                if (!success) {
                    this.showErrorMessage('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
                    return;
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            consultation.state = this.consultationStates.COMPLETED;
            consultation.endTime = new Date().toISOString();

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã"
            await this.addPatientToMyPatients(consultation);

            // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            this.activeConsultations.delete(patientId);

            // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ —Ç–µ–∫—É—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            if (patientId === this.currentActivePatientId) {
                this.currentActivePatientId = null;
                this.currentConsultation = null;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateActiveConsultationsPanel();
            this.saveActiveConsultations();

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–∞—Ü–∏–µ–Ω—Ç–∞
            this.showPatientCardWithActiveConsultation(consultation.patient);

            this.showSuccessMessage(`–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è "${consultation.patient.name}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
            console.log('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', consultation.patient.name);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
            this.logError('Complete Consultation Error', error);
            this.showErrorMessage('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
        } finally {
            this.hideLoading();
        }
    }

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    promptCloseConsultation(patientId) {
        const consultation = this.activeConsultations.get(patientId);
        if (!consultation) return;

        const patientName = consultation.patient.name;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const hasUnsavedChanges = consultation.isModified || this.checkFormChanges();
        
        let message = `–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–∞—Ü–∏–µ–Ω—Ç–∞ "${patientName}"?`;
        if (hasUnsavedChanges) {
            message = `–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ "${patientName}".\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
        this.showConsultationCloseDialog(patientId, message, hasUnsavedChanges);
    }

    // –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    showConsultationCloseDialog(patientId, message, hasUnsavedChanges) {
        const consultation = this.activeConsultations.get(patientId);
        const patientName = consultation.patient.name;

        const dialogHTML = `
            <div class="modal fade" id="closeConsultationModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content enhanced-modal-premium">
                        <div class="modal-header enhanced-modal-header-premium">
                            <div class="modal-title-wrapper-premium">
                                <div class="modal-icon-premium">
                                    <i class="fas fa-exclamation-triangle"></i>
                                </div>
                                <div>
                                    <h5 class="modal-title-premium">–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</h5>
                                    <p class="modal-subtitle-premium">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</p>
                                </div>
                            </div>
                            <button type="button" class="btn-close-premium" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body enhanced-modal-body-premium">
                            <div class="consultation-close-content">
                                <div class="patient-info-close">
                                    <div class="patient-avatar-close">
                                        <span>${this.getPatientInitials(consultation.patient)}</span>
                                    </div>
                                    <div class="patient-details-close">
                                        <h6>${patientName}</h6>
                                        <small>–í—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: ${this.getTimeElapsed(consultation.startTime)}</small>
                                    </div>
                                </div>
                                <p class="close-message">${message}</p>
                                ${hasUnsavedChanges ? `
                                    <div class="alert alert-warning">
                                        <i class="fas fa-info-circle"></i>
                                        <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                        <div class="modal-footer enhanced-modal-footer-premium">
                            <button type="button" class="btn-modal-action btn-modal-secondary" data-bs-dismiss="modal">
                                <i class="fas fa-arrow-left"></i>
                                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
                            </button>
                            ${hasUnsavedChanges ? `
                                <button type="button" class="btn-modal-action btn-modal-success" onclick="app.saveAndCompleteConsultation('${patientId}')">
                                    <i class="fas fa-save"></i>
                                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
                                </button>
                            ` : ''}
                            <button type="button" class="btn-modal-action btn-modal-danger" onclick="app.cancelConsultation('${patientId}')">
                                <i class="fas fa-trash"></i>
                                ${hasUnsavedChanges ? '–û—Ç–º–µ–Ω–∏—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' : '–û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é'}
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <style>
            /* –ü–†–ï–ú–ò–£–ú: –°—Ç–∏–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */
            .enhanced-modal-premium {
                border: none;
                border-radius: 20px;
                box-shadow: 0 20px 60px rgba(0,0,0,0.25);
                backdrop-filter: blur(10px);
                overflow: hidden;
            }

            .enhanced-modal-header-premium {
                background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
                color: white;
                padding: 2rem;
                border-bottom: none;
                position: relative;
                overflow: hidden;
            }

            .enhanced-modal-header-premium::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
                opacity: 0.3;
            }

            .modal-title-wrapper-premium {
                display: flex;
                align-items: center;
                gap: 1.5rem;
                position: relative;
                z-index: 2;
            }

            .modal-icon-premium {
                width: 60px;
                height: 60px;
                background: rgba(255,255,255,0.2);
                border-radius: 15px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 24px;
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255,255,255,0.3);
            }

            .modal-title-premium {
                font-size: 1.5rem;
                font-weight: 600;
                margin: 0;
                line-height: 1.2;
            }

            .modal-subtitle-premium {
                font-size: 0.9rem;
                opacity: 0.9;
                margin: 0.5rem 0 0 0;
                font-weight: 400;
            }

            .btn-close-premium {
                background: rgba(255,255,255,0.2);
                border: 1px solid rgba(255,255,255,0.3);
                border-radius: 10px;
                width: 40px;
                height: 40px;
                color: white;
                font-size: 18px;
                transition: all 0.3s ease;
                position: relative;
                z-index: 2;
            }

            .btn-close-premium:hover {
                background: rgba(255,255,255,0.3);
                transform: scale(1.1);
            }

            .enhanced-modal-body-premium {
                padding: 2.5rem;
                background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
            }

            .consultation-close-content {
                text-align: center;
            }

            .patient-info-close {
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 1rem;
                margin-bottom: 1.5rem;
                padding: 1rem;
                background: rgba(248, 250, 252, 0.5);
                border-radius: 12px;
            }

            .patient-avatar-close {
                width: 48px;
                height: 48px;
                background: linear-gradient(135deg, var(--primary-color), #246185);
                border-radius: 12px;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-weight: 700;
                font-size: 1rem;
            }

            .patient-details-close {
                text-align: left;
            }

            .patient-details-close h6 {
                margin: 0;
                font-weight: 600;
                color: #1a202c;
            }

            .patient-details-close small {
                color: #6c757d;
            }

            .close-message {
                font-size: 1.1rem;
                color: #1a202c;
                margin-bottom: 1.5rem;
                line-height: 1.5;
            }

            .enhanced-modal-footer-premium {
                background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
                padding: 1.5rem 2.5rem;
                border-top: 1px solid #e2e8f0;
                display: flex;
                gap: 1rem;
                justify-content: center;
                flex-wrap: wrap;
            }

            .btn-modal-action {
                padding: 12px 24px;
                border-radius: 10px;
                font-weight: 600;
                display: flex;
                align-items: center;
                gap: 8px;
                transition: all 0.3s ease;
                border: none;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                cursor: pointer;
            }

            .btn-modal-action:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(0,0,0,0.2);
            }

            .btn-modal-secondary {
                background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);
                color: white;
            }

            .btn-modal-success {
                background: linear-gradient(135deg, #22c55e 0%, #16a085 100%);
                color: white;
            }

            .btn-modal-danger {
                background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
                color: white;
            }

            @media (max-width: 768px) {
                .enhanced-modal-footer-premium {
                    flex-direction: column;
                }

                .btn-modal-action {
                    width: 100%;
                    justify-content: center;
                }
            }
            </style>
        `;

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–æ–¥–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingModal = document.getElementById('closeConsultationModal');
        if (existingModal) {
            existingModal.remove();
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–æ–¥–∞–ª
        document.body.insertAdjacentHTML('beforeend', dialogHTML);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª
        const modal = new bootstrap.Modal(document.getElementById('closeConsultationModal'));
        modal.show();

        // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        document.getElementById('closeConsultationModal').addEventListener('hidden.bs.modal', function() {
            this.remove();
        });
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    async saveAndCompleteConsultation(patientId = null) {
        try {
            const targetPatientId = patientId || this.currentActivePatientId;
            const consultation = this.activeConsultations.get(targetPatientId);
            
            if (!consultation) {
                this.showErrorMessage('–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            this.showLoading();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            if (typeof consultationsManager !== 'undefined' && consultationsManager.saveConsultation) {
                const success = await consultationsManager.saveConsultation();
                if (!success) {
                    this.showErrorMessage('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
                    return;
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            consultation.state = this.consultationStates.COMPLETED;
            consultation.endTime = new Date().toISOString();

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã"
            await this.addPatientToMyPatients(consultation);

            // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            this.activeConsultations.delete(targetPatientId);

            // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ —Ç–µ–∫—É—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            if (targetPatientId === this.currentActivePatientId) {
                this.currentActivePatientId = null;
                this.currentPatient = null;
                this.currentConsultation = null;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateActiveConsultationsPanel();
            this.saveActiveConsultations();

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ä—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            this.showPatientCardWithActiveConsultation(consultation.patient);

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
            const modal = document.getElementById('closeConsultationModal');
            if (modal) {
                bootstrap.Modal.getInstance(modal)?.hide();
            }

            this.showSuccessMessage(`–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è "${consultation.patient.name}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);
            console.log('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', consultation.patient.name);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
            this.logError('Complete Consultation Error', error);
            this.showErrorMessage('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
        } finally {
            this.hideLoading();
        }
    }

    // –û—Ç–º–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    cancelConsultation(patientId) {
        try {
            const consultation = this.activeConsultations.get(patientId);
            if (!consultation) return;

            // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            this.activeConsultations.delete(patientId);

            // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ —Ç–µ–∫—É—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            if (patientId === this.currentActivePatientId) {
                this.currentActivePatientId = null;
                this.currentPatient = null;
                this.currentConsultation = null;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateActiveConsultationsPanel();
            this.saveActiveConsultations();

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
            this.backToSchedule();

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
            const modal = document.getElementById('closeConsultationModal');
            if (modal) {
                bootstrap.Modal.getInstance(modal)?.hide();
            }

            this.showNotification(`–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è "${consultation.patient.name}" –æ—Ç–º–µ–Ω–µ–Ω–∞`, 'warning', 3000);
            console.log('‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞:', consultation.patient.name);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
            this.logError('Cancel Consultation Error', error);
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã" –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    async addPatientToMyPatients(consultation) {
        try {
            const patient = consultation.patient;
            
            // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
            let existingPatientIndex = this.myPatients.findIndex(p => p.id === patient.id);
            
            if (existingPatientIndex >= 0) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
                this.myPatients[existingPatientIndex].lastConsultationDate = consultation.endTime;
                this.myPatients[existingPatientIndex].totalConsultations = (this.myPatients[existingPatientIndex].totalConsultations || 0) + 1;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
                if (!this.myPatients[existingPatientIndex].consultations) {
                    this.myPatients[existingPatientIndex].consultations = [];
                }
                this.myPatients[existingPatientIndex].consultations.push({
                    id: consultation.id,
                    date: consultation.endTime,
                    appointmentType: 'primary',
                    complaints: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                    mainDiagnosis: '–í —Å—Ç–∞–¥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏'
                });
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
                const newPatientEntry = {
                    ...patient,
                    lastConsultationDate: consultation.endTime,
                    totalConsultations: 1,
                    consultations: [{
                        id: consultation.id,
                        date: consultation.endTime,
                        appointmentType: 'primary',
                        complaints: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                        mainDiagnosis: '–í —Å—Ç–∞–¥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏'
                    }]
                };
                
                this.myPatients.push(newPatientEntry);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if (typeof storageManager !== 'undefined' && storageManager && storageManager.isInitialized) {
                const patientToSave = existingPatientIndex >= 0 
                    ? this.myPatients[existingPatientIndex] 
                    : this.myPatients[this.myPatients.length - 1];
                    
                await storageManager.savePatient(patientToSave);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            const cacheKey = `my_patients_${this.doctorId}`;
            this.cache.set(cacheKey, {
                data: this.myPatients,
                timestamp: Date.now()
            });

            console.log('üë• –ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã":', patient.name);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã":', error);
            this.logError('Add Patient To My Patients Error', error);
        }
    }

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    getPatientInitials(patient) {
        try {
            if (patient.personalInfo) {
                const lastName = patient.personalInfo.lastName || '';
                const firstName = patient.personalInfo.firstName || '';
                return (lastName.charAt(0) + firstName.charAt(0)).toUpperCase();
            }
            
            if (patient.name) {
                const nameParts = patient.name.split(' ');
                return nameParts.length >= 2 
                    ? (nameParts[0].charAt(0) + nameParts[1].charAt(0)).toUpperCase()
                    : nameParts[0].charAt(0).toUpperCase();
            }
            
            return '–ù–ü';
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–æ–≤:', error);
            return '–ù–ü';
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    getPatientShortName(patient) {
        try {
            if (patient.personalInfo?.lastName) {
                const lastName = patient.personalInfo.lastName;
                const firstName = patient.personalInfo.firstName;
                return `${lastName} ${firstName.charAt(0)}.`;
            }
            
            if (patient.name) {
                const nameParts = patient.name.split(' ');
                if (nameParts.length >= 2) {
                    return `${nameParts[0]} ${nameParts[1].charAt(0)}.`;
                }
                return nameParts[0];
            }
            
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏:', error);
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        }
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    getTimeElapsed(startTime) {
        try {
            const now = new Date();
            const start = new Date(startTime);
            const diff = now - start;
            
            const minutes = Math.floor(diff / 60000);
            const hours = Math.floor(minutes / 60);
            
            if (hours > 0) {
                return `${hours}—á ${minutes % 60}–º`;
            } else {
                return `${minutes}–º`;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:', error);
            return '0–º';
        }
    }

    getPatientDisplayName(patient) {
        try {
            if (patient.personalInfo?.lastName) {
                return `${patient.personalInfo.lastName} ${patient.personalInfo.firstName} ${patient.personalInfo.middleName || ''}`.trim();
            }
            return patient.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç';
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', error);
            this.logError('Get Patient Name Error', error);
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç';
        }
    }

    getPatientAge(patient) {
        try {
            if (patient.personalInfo?.birthDate) {
                return this.calculateAge(patient.personalInfo.birthDate);
            }
            if (patient.birthDate) {
                return this.calculateAge(patient.birthDate);
            }
            return patient.age || '–ù–µ —É–∫–∞–∑–∞–Ω';
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', error);
            this.logError('Get Patient Age Error', error);
            return '–ù–µ —É–∫–∞–∑–∞–Ω';
        }
    }

    getPatientGender(patient) {
        try {
            const gender = patient.personalInfo?.gender || patient.gender;
            if (gender === '–ú' || gender === 'male') return '–ú—É–∂—Å–∫–æ–π';
            if (gender === '–ñ' || gender === 'female') return '–ñ–µ–Ω—Å–∫–∏–π';
            return '–ù–µ —É–∫–∞–∑–∞–Ω';
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', error);
            this.logError('Get Patient Gender Error', error);
            return '–ù–µ —É–∫–∞–∑–∞–Ω';
        }
    }

    calculateAge(birthDate) {
        try {
            const today = new Date();
            const birth = new Date(birthDate);
            let age = today.getFullYear() - birth.getFullYear();
            const monthDiff = today.getMonth() - birth.getMonth();
            
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
                age--;
            }
            
            return age;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞:', error);
            this.logError('Calculate Age Error', error);
            return 0;
        }
    }

    formatDate(dateString) {
        try {
            if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
            
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
            return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        }
    }

    formatDateTime(dateString) {
        try {
            if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
            
            const date = new Date(dateString);
            return date.toLocaleString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã-–≤—Ä–µ–º–µ–Ω–∏:', error);
            return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        }
    }

    getAppointmentTypeText(type) {
        switch (type) {
            case 'primary': return '–ü–µ—Ä–≤–∏—á–Ω—ã–π';
            case 'secondary': return '–ü–æ–≤—Ç–æ—Ä–Ω—ã–π';
            default: return '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è';
        }
    }

    // === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –°–ò–°–¢–ï–ú–´ ===

    generateConsultationId() {
        return 'cons_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    // –ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ ID
    findPatientById(patientId) {
        try {
            // –ò—â–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è—Ö
            const activeConsultation = this.activeConsultations.get(patientId);
            if (activeConsultation) {
                return activeConsultation.patient;
            }

            // –ò—â–µ–º –≤ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã"
            const myPatient = this.myPatients.find(p => p.id === patientId);
            if (myPatient) {
                return myPatient;
            }

            // –ò—â–µ–º –≤ –¥–µ–º–æ-–ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if (typeof scheduleGridManager !== 'undefined' && scheduleGridManager) {
                const demoPatient = scheduleGridManager.getPatientById(patientId);
                if (demoPatient) {
                    return demoPatient;
                }
            }

            return null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', error);
            return null;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ
    checkFormChanges() {
        try {
            const form = document.getElementById('consultationForm');
            if (!form) return false;

            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            const inputs = form.querySelectorAll('input, textarea, select');
            for (const input of inputs) {
                if (input.value && input.value.trim() !== '') {
                    return true;
                }
            }
            return false;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–æ—Ä–º—ã:', error);
            return false;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    saveConsultationDraft(patientId) {
        try {
            const consultation = this.activeConsultations.get(patientId);
            if (!consultation) return;

            consultation.isModified = true;
            consultation.lastSaved = new Date().toISOString();
            
            this.saveActiveConsultations();
            this.updateActiveConsultationsPanel();
            this.showNotification('–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success', 2000);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞:', error);
            this.logError('Save Draft Error', error);
        }
    }

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    previewConsultation(patientId) {
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', 'info', 3000);
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≤ localStorage
    saveActiveConsultations() {
        try {
            const data = Array.from(this.activeConsultations.entries()).map(([patientId, consultation]) => ({
                patientId,
                consultation: {
                    ...consultation,
                    patient: { id: consultation.patient.id, name: consultation.patient.name }
                }
            }));

            localStorage.setItem('cardio_active_consultations', JSON.stringify(data));
            console.log('üíæ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:', error);
            this.logError('Save Active Consultations Error', error);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏–∑ localStorage
    loadActiveConsultations() {
        try {
            const data = localStorage.getItem('cardio_active_consultations');
            if (!data) return;

            const consultationsData = JSON.parse(data);
            
            consultationsData.forEach(({ patientId, consultation }) => {
                this.activeConsultations.set(patientId, consultation);
            });

            console.log('üìÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', this.activeConsultations.size);
            
            this.updateActiveConsultationsPanel();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:', error);
            this.logError('Load Active Consultations Error', error);
            localStorage.removeItem('cardio_active_consultations');
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏
    addNewConsultationFromPanel() {
        try {
            this.switchToTab('schedule');
            this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', 'info', 3000);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
            this.logError('Add New Consultation Error', error);
        }
    }

    // === –°–ò–°–¢–ï–ú–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ===

    setupGlobalErrorHandling() {
        window.addEventListener('error', this.handleGlobalError);
        window.addEventListener('unhandledrejection', this.handleUnhandledRejection);
        
        const originalConsoleError = console.error;
        console.error = (...args) => {
            this.logError('Console Error', args);
            originalConsoleError.apply(console, args);
        };
    }

    handleGlobalError(event) {
        this.errorCount++;
        console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
        
        if (this.errorCount > this.maxErrors) {
            this.showErrorMessage('–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞–º–∏. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            return;
        }
        
        this.logError('Global Error', {
            message: event.message,
            filename: event.filename,
            lineno: event.lineno,
            colno: event.colno,
            error: event.error
        });
    }

    handleUnhandledRejection(event) {
        this.errorCount++;
        console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', event.reason);
        
        this.logError('Unhandled Promise Rejection', event.reason);
        event.preventDefault();
    }

    logError(type, error) {
        const errorInfo = {
            type: type,
            error: error,
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            currentTab: this.currentTab,
            isInitialized: this.isInitialized
        };
        
        try {
            const errors = JSON.parse(localStorage.getItem('app_errors') || '[]');
            errors.push(errorInfo);
            
            if (errors.length > 50) {
                errors.splice(0, errors.length - 50);
            }
            
            localStorage.setItem('app_errors', JSON.stringify(errors));
        } catch (e) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫—É –≤ localStorage:', e);
        }
    }

    handleCriticalError(message, error) {
        this.criticalErrors.push({ message, error, timestamp: new Date().toISOString() });
        
        const errorMessage = `
            <div class="alert alert-danger">
                <h5><i class="fas fa-exclamation-triangle"></i> –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</h5>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${message}</p>
                <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong></p>
                <ul>
                    <li>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (F5)</li>
                    <li>–û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞</li>
                    <li>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</li>
                </ul>
                <button class="btn btn-primary" onclick="window.location.reload()">
                    <i class="fas fa-refresh"></i> –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–π—á–∞—Å
                </button>
            </div>
        `;
        
        document.body.insertAdjacentHTML('afterbegin', `
            <div style="position: fixed; top: 20px; left: 20px; right: 20px; z-index: 10000; max-width: 600px; margin: 0 auto;">
                ${errorMessage}
            </div>
        `);
    }

    setDefaultActiveTab() {
        try {
            document.querySelectorAll('.nav-tabs .nav-link').forEach(link => {
                link.classList.remove('active');
            });
            
            document.querySelectorAll('.tab-pane').forEach(pane => {
                pane.classList.remove('show', 'active');
            });
            
            const scheduleTab = document.getElementById('schedule-tab');
            const schedulePane = document.getElementById('schedule');
            
            if (scheduleTab && schedulePane) {
                scheduleTab.classList.add('active');
                schedulePane.classList.add('show', 'active');
                this.currentTab = 'schedule';
                console.log('üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ');
            } else {
                console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏:', error);
            this.logError('Tab Setup Error', error);
        }
    }

    initializeDateTime() {
        try {
            this.updateDateTime();
            setInterval(() => this.updateDateTime(), 1000);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:', error);
            this.logError('DateTime Init Error', error);
        }
    }

    updateDateTime() {
        try {
            const now = new Date();
            const options = { 
                year: 'numeric', 
                month: '2-digit', 
                day: '2-digit',
                hour: '2-digit', 
                minute: '2-digit',
                second: '2-digit'
            };
            const element = document.getElementById('currentDateTime');
            if (element) {
                element.textContent = now.toLocaleDateString('ru-RU', options);
            }
        } catch (error) {
            if (Math.random() < 0.01) {
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:', error);
            }
        }
    }

    async initializeManagers() {
        const managers = [
            { name: 'storageManager', action: async (mgr) => await mgr.init() },
            { name: 'patientsManager', action: async (mgr) => await mgr.init() },
            { name: 'consultationsManager', action: async (mgr) => await mgr.init() },
            { name: 'researchManager', action: async (mgr) => await mgr.init() },
            { name: 'scheduleGridManager', action: async (mgr) => await mgr.init() },
            { name: 'autofillManager', action: (mgr) => mgr.init() },
            { name: 'mkb10Manager', action: (mgr) => mgr.init() },
            { name: 'calculatorManager', action: (mgr) => mgr.init() }
        ];

        for (const { name, action } of managers) {
            try {
                if (typeof window[name] !== 'undefined' && window[name]) {
                    await action(window[name]);
                    console.log(`‚úÖ ${name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
                } else {
                    console.warn(`‚ö†Ô∏è ${name} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ${name}:`, error);
                this.logError(`Manager Init Error: ${name}`, error);
                
                if (['storageManager', 'patientsManager'].includes(name)) {
                    this.showNotification(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ${name}`, 'warning', 5000);
                }
            }
        }
    }

    async loadTabContents() {
        try {
            await this.loadScheduleTab();
            await this.loadResearchTab();
            await this.loadMyPatientsTab();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∫–ª–∞–¥–æ–∫:', error);
            this.logError('Tab Content Load Error', error);
        }
    }

    async loadScheduleTab() {
        try {
            const content = document.getElementById('scheduleContent');
            if (content && typeof scheduleGridManager !== 'undefined' && scheduleGridManager) {
                content.innerHTML = scheduleGridManager.getScheduleGridHTML();
                scheduleGridManager.onTabActivate();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
            this.logError('Schedule Tab Load Error', error);
        }
    }

    async loadResearchTab() {
        try {
            const content = document.getElementById('researchContent');
            if (content && typeof researchManager !== 'undefined' && researchManager) {
                content.innerHTML = researchManager.getResearchInterface();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π:', error);
            this.logError('Research Tab Load Error', error);
        }
    }

    async loadMyPatientsTab() {
        try {
            const content = document.getElementById('myPatientsContent');
            if (!content) {
                console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä myPatientsContent –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            content.innerHTML = this.getMyPatientsInterface();
            
            requestAnimationFrame(async () => {
                try {
                    await this.updateMyPatientsList();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:', error);
                    this.logError('Patients List Update Error', error);
                }
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–∫–∏ "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã":', error);
            this.logError('My Patients Tab Load Error', error);
        }
    }

    setupEventListeners() {
        try {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
            document.querySelectorAll('[data-bs-toggle="tab"]').forEach(tab => {
                tab.addEventListener('shown.bs.tab', (event) => {
                    try {
                        const targetTab = event.target.getAttribute('data-bs-target').substring(1);
                        this.currentTab = targetTab;
                        this.onTabChange(targetTab);
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:', error);
                        this.logError('Tab Switch Error', error);
                    }
                });
            });

            // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
            document.addEventListener('keydown', (e) => {
                try {
                    if (e.key === 'Escape') {
                        if (this.currentTab === 'myPatients' && this.currentView !== 'list') {
                            this.backToPatientsList();
                        }
                        
                        if (this.currentActivePatientId) {
                            this.backToSchedule();
                        }
                    }
                    
                    if (e.ctrlKey) {
                        switch (e.key) {
                            case '1':
                                e.preventDefault();
                                this.switchToTab('schedule');
                                break;
                            case '2':
                                e.preventDefault();
                                this.switchToTab('research');
                                break;
                            case '3':
                                e.preventDefault();
                                this.switchToTab('myPatients');
                                break;
                        }
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à:', error);
                    this.logError('Keyboard Handler Error', error);
                }
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            window.addEventListener('beforeunload', () => {
                try {
                    this.saveApplicationState();
                    this.saveActiveConsultations();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
                    this.logError('Save State Error', error);
                }
            });

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            setInterval(() => {
                if (this.activeConsultations.size > 0) {
                    this.updateActiveConsultationsPanel();
                }
            }, 60000);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π:', error);
            this.logError('Setup Event Listeners Error', error);
        }
    }

    onTabChange(tabId) {
        try {
            console.log(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabId}`);
            
            if (this.currentTab === 'myPatients' && this.currentView !== 'list') {
                this.backToPatientsList();
            }
            
            switch (tabId) {
                case 'schedule':
                    if (typeof scheduleGridManager !== 'undefined' && scheduleGridManager) {
                        scheduleGridManager.onTabActivate();
                    }
                    break;
                case 'myPatients':
                    this.onMyPatientsTabActivate();
                    break;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏:', error);
            this.logError('Tab Change Error', error);
        }
    }

    initializeInterface() {
        try {
            this.initializeCalculators();
            this.initializeTooltips();
            this.setupQuickNavigation();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:', error);
            this.logError('Initialize Interface Error', error);
        }
    }

    initializeCalculators() {
        try {
            if (typeof calculatorManager !== 'undefined' && calculatorManager) {
                calculatorManager.loadCalculators();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤:', error);
            this.logError('Initialize Calculators Error', error);
        }
    }

    initializeTooltips() {
        try {
            if (typeof bootstrap !== 'undefined') {
                const tooltips = document.querySelectorAll('[data-bs-toggle="tooltip"]');
                tooltips.forEach(tooltip => {
                    new bootstrap.Tooltip(tooltip);
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫:', error);
            this.logError('Initialize Tooltips Error', error);
        }
    }

    setupQuickNavigation() {
        console.log('üéØ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: Ctrl+1 (–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ), Ctrl+2 (–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è), Ctrl+3 (–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã), ESC (–°–≤–µ—Ä–Ω—É—Ç—å/–Ω–∞–∑–∞–¥)');
    }

    async preloadCriticalData() {
        try {
            if (typeof calculatorManager !== 'undefined' && calculatorManager) {
                calculatorManager.preloadCalculators();
            }
            
            if (typeof mkb10Manager !== 'undefined' && mkb10Manager) {
                mkb10Manager.preloadCommonDiagnoses();
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', error);
            this.logError('Preload Error', error);
        }
    }

    // === –ú–ï–¢–û–î–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê ===

    showLoading() {
        try {
            if (typeof utils !== 'undefined' && utils.showLoading) {
                utils.showLoading();
            } else {
                console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...');
            }
        } catch (error) {
            console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...');
        }
    }

    hideLoading() {
        try {
            if (typeof utils !== 'undefined' && utils.hideLoading) {
                utils.hideLoading();
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–∫—Ä—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        }
    }

    showNotification(message, type = 'info', duration = 3000) {
        try {
            if (typeof utils !== 'undefined' && utils.showNotification) {
                utils.showNotification(message, type, duration);
            } else {
                console.log(`${type.toUpperCase()}: ${message}`);
            }
        } catch (error) {
            console.log(`${type.toUpperCase()}: ${message}`);
        }
    }

    showErrorMessage(message) {
        try {
            if (typeof utils !== 'undefined' && utils.showErrorMessage) {
                utils.showErrorMessage(message);
            } else {
                console.error('ERROR:', message);
                alert('–û—à–∏–±–∫–∞: ' + message);
            }
        } catch (error) {
            console.error('ERROR:', message);
            alert('–û—à–∏–±–∫–∞: ' + message);
        }
    }

    showSuccessMessage(message) {
        try {
            if (typeof utils !== 'undefined' && utils.showSuccessMessage) {
                utils.showSuccessMessage(message);
            } else {
                console.log('SUCCESS:', message);
            }
        } catch (error) {
            console.log('SUCCESS:', message);
        }
    }

    switchToTab(tabId) {
        try {
            const tabButton = document.querySelector(`[data-bs-target="#${tabId}"]`);
            if (tabButton && typeof bootstrap !== 'undefined') {
                const tab = new bootstrap.Tab(tabButton);
                tab.show();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:', error);
            this.logError('Switch Tab Error', error);
        }
    }

    saveApplicationState() {
        try {
            const state = {
                currentPatientId: this.currentPatient?.id,
                currentTab: this.currentTab,
                currentView: this.currentView,
                navigationHistory: this.navigationHistory,
                appVersion: this.appVersion,
                starredPatients: [...this.starredPatients],
                currentActivePatientId: this.currentActivePatientId,
                timestamp: new Date().toISOString()
            };
            
            localStorage.setItem('docassistant_state', JSON.stringify(state));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
            this.logError('Save Application State Error', error);
        }
    }

    loadApplicationState() {
        try {
            const savedState = localStorage.getItem('docassistant_state');
            if (savedState) {
                const state = JSON.parse(savedState);
                
                this.navigationHistory = state.navigationHistory || [];
                
                if (state.starredPatients) {
                    this.starredPatients = new Set(state.starredPatients);
                }
                
                this.currentActivePatientId = state.currentActivePatientId || null;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
            this.logError('Load Application State Error', error);
        }
    }

    // === –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í ===

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏
    showPatientCard(patient) {
        console.log('–ü–æ–∫–∞–∑ –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞:', patient.name);
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }

    viewPatientHistory(patientId) {
        console.log('–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', patientId);
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', 'info', 3000);
    }

    exportPatientData(patientId) {
        console.log('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞:', patientId);
        this.showNotification('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', 'info', 3000);
    }

    exportAllPatientsData() {
        console.log('–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤');
        this.showNotification('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', 'info', 3000);
    }

    importPatientsData() {
        console.log('–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤');
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', 'info', 3000);
    }

    showStorageStats() {
        console.log('–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
        this.showNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', 'info', 3000);
    }

    viewConsultationDetails(consultationId) {
        console.log('–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', consultationId);
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', 'info', 3000);
    }

    copyConsultation(consultationId) {
        console.log('–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', consultationId);
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', 'info', 3000);
    }

    startNewConsultation(patientId) {
        try {
            let patient = this.currentPatient;
            
            if (!patient) {
                patient = this.findPatientById(patientId);
            }

            if (!patient) {
                this.showErrorMessage('–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            this.createActiveConsultation(patient);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
            this.logError('Start New Consultation Error', error);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new DocAssistantApp();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    app.init().then(() => {
        app.loadApplicationState();
    }).catch(error => {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.app = app;